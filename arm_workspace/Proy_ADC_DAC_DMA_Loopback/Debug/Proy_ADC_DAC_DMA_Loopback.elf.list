
Proy_ADC_DAC_DMA_Loopback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002038  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021c0  080021c0  000121c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080021e0  080021e0  000121e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  080021e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  8 .bss          00001614  2000008c  2000008c  0002008c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200016a0  200016a0  0002008c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000dae8  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002860  00000000  00000000  0002dba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006d65  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  00037170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c10  00000000  00000000  00037ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005337  00000000  00000000  000387b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000038c9  00000000  00000000  0003dae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000ec  00000000  00000000  000413b0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001c74  00000000  00000000  0004149c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021a8 	.word	0x080021a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	080021a8 	.word	0x080021a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97e 	b.w	80004dc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460e      	mov	r6, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9d08      	ldr	r5, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d150      	bne.n	80002aa <__udivmoddi4+0xb2>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96c      	bls.n	80002e8 <__udivmoddi4+0xf0>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0420 	rsb	r4, lr, #32
 800021c:	fa20 f404 	lsr.w	r4, r0, r4
 8000220:	fa01 f60e 	lsl.w	r6, r1, lr
 8000224:	ea44 0c06 	orr.w	ip, r4, r6
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000234:	0c22      	lsrs	r2, r4, #16
 8000236:	fbbc f0f9 	udiv	r0, ip, r9
 800023a:	fa1f f887 	uxth.w	r8, r7
 800023e:	fb09 c610 	mls	r6, r9, r0, ip
 8000242:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000246:	fb00 f308 	mul.w	r3, r0, r8
 800024a:	42b3      	cmp	r3, r6
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x6a>
 800024e:	19f6      	adds	r6, r6, r7
 8000250:	f100 32ff 	add.w	r2, r0, #4294967295
 8000254:	f080 8122 	bcs.w	800049c <__udivmoddi4+0x2a4>
 8000258:	42b3      	cmp	r3, r6
 800025a:	f240 811f 	bls.w	800049c <__udivmoddi4+0x2a4>
 800025e:	3802      	subs	r0, #2
 8000260:	443e      	add	r6, r7
 8000262:	1af6      	subs	r6, r6, r3
 8000264:	b2a2      	uxth	r2, r4
 8000266:	fbb6 f3f9 	udiv	r3, r6, r9
 800026a:	fb09 6613 	mls	r6, r9, r3, r6
 800026e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000272:	fb03 f808 	mul.w	r8, r3, r8
 8000276:	45a0      	cmp	r8, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x96>
 800027a:	19e4      	adds	r4, r4, r7
 800027c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x2a0>
 8000284:	45a0      	cmp	r8, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x2a0>
 800028a:	3b02      	subs	r3, #2
 800028c:	443c      	add	r4, r7
 800028e:	ebc8 0404 	rsb	r4, r8, r4
 8000292:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	2d00      	cmp	r5, #0
 800029a:	d062      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029c:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a0:	2300      	movs	r3, #0
 80002a2:	602c      	str	r4, [r5, #0]
 80002a4:	606b      	str	r3, [r5, #4]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d907      	bls.n	80002be <__udivmoddi4+0xc6>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	d055      	beq.n	800035e <__udivmoddi4+0x166>
 80002b2:	2100      	movs	r1, #0
 80002b4:	e885 0041 	stmia.w	r5, {r0, r6}
 80002b8:	4608      	mov	r0, r1
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	f040 8090 	bne.w	80003e8 <__udivmoddi4+0x1f0>
 80002c8:	42b3      	cmp	r3, r6
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xda>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb66 0603 	sbc.w	r6, r6, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	46b4      	mov	ip, r6
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d040      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e0:	e885 1010 	stmia.w	r5, {r4, ip}
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	b912      	cbnz	r2, 80002f0 <__udivmoddi4+0xf8>
 80002ea:	2701      	movs	r7, #1
 80002ec:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f0:	fab7 fe87 	clz	lr, r7
 80002f4:	f1be 0f00 	cmp.w	lr, #0
 80002f8:	d135      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fa:	1bf3      	subs	r3, r6, r7
 80002fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f0f8 	udiv	r0, r3, r8
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb08 3610 	mls	r6, r8, r0, r3
 8000310:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000314:	fb0c f300 	mul.w	r3, ip, r0
 8000318:	42b3      	cmp	r3, r6
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19f6      	adds	r6, r6, r7
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42b3      	cmp	r3, r6
 8000326:	f200 80ce 	bhi.w	80004c6 <__udivmoddi4+0x2ce>
 800032a:	4610      	mov	r0, r2
 800032c:	1af6      	subs	r6, r6, r3
 800032e:	b2a2      	uxth	r2, r4
 8000330:	fbb6 f3f8 	udiv	r3, r6, r8
 8000334:	fb08 6613 	mls	r6, r8, r3, r6
 8000338:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800033c:	fb0c fc03 	mul.w	ip, ip, r3
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f103 32ff 	add.w	r2, r3, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b5 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 8000352:	4613      	mov	r3, r2
 8000354:	ebcc 0404 	rsb	r4, ip, r4
 8000358:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800035c:	e79c      	b.n	8000298 <__udivmoddi4+0xa0>
 800035e:	4629      	mov	r1, r5
 8000360:	4628      	mov	r0, r5
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0120 	rsb	r1, lr, #32
 800036a:	fa06 f30e 	lsl.w	r3, r6, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f901 	lsr.w	r9, r0, r1
 8000376:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037a:	40ce      	lsrs	r6, r1
 800037c:	ea49 0903 	orr.w	r9, r9, r3
 8000380:	fbb6 faf8 	udiv	sl, r6, r8
 8000384:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000388:	fb08 661a 	mls	r6, r8, sl, r6
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000394:	fb0a f20c 	mul.w	r2, sl, ip
 8000398:	429a      	cmp	r2, r3
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1be>
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003a6:	f080 8087 	bcs.w	80004b8 <__udivmoddi4+0x2c0>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f240 8084 	bls.w	80004b8 <__udivmoddi4+0x2c0>
 80003b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80003b4:	443b      	add	r3, r7
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	fa1f f989 	uxth.w	r9, r9
 80003bc:	fbb3 f1f8 	udiv	r1, r3, r8
 80003c0:	fb08 3311 	mls	r3, r8, r1, r3
 80003c4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003c8:	fb01 f60c 	mul.w	r6, r1, ip
 80003cc:	429e      	cmp	r6, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1e8>
 80003d0:	19db      	adds	r3, r3, r7
 80003d2:	f101 32ff 	add.w	r2, r1, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 80003d8:	429e      	cmp	r6, r3
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80003e6:	e78e      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e8:	f1c1 0e20 	rsb	lr, r1, #32
 80003ec:	fa22 f40e 	lsr.w	r4, r2, lr
 80003f0:	408b      	lsls	r3, r1
 80003f2:	4323      	orrs	r3, r4
 80003f4:	fa20 f70e 	lsr.w	r7, r0, lr
 80003f8:	fa06 f401 	lsl.w	r4, r6, r1
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	fa26 f60e 	lsr.w	r6, r6, lr
 8000404:	433c      	orrs	r4, r7
 8000406:	fbb6 f9fc 	udiv	r9, r6, ip
 800040a:	0c27      	lsrs	r7, r4, #16
 800040c:	fb0c 6619 	mls	r6, ip, r9, r6
 8000410:	fa1f f883 	uxth.w	r8, r3
 8000414:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000418:	fb09 f708 	mul.w	r7, r9, r8
 800041c:	42b7      	cmp	r7, r6
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	fa00 fa01 	lsl.w	sl, r0, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x242>
 8000428:	18f6      	adds	r6, r6, r3
 800042a:	f109 30ff 	add.w	r0, r9, #4294967295
 800042e:	d241      	bcs.n	80004b4 <__udivmoddi4+0x2bc>
 8000430:	42b7      	cmp	r7, r6
 8000432:	d93f      	bls.n	80004b4 <__udivmoddi4+0x2bc>
 8000434:	f1a9 0902 	sub.w	r9, r9, #2
 8000438:	441e      	add	r6, r3
 800043a:	1bf6      	subs	r6, r6, r7
 800043c:	b2a0      	uxth	r0, r4
 800043e:	fbb6 f4fc 	udiv	r4, r6, ip
 8000442:	fb0c 6614 	mls	r6, ip, r4, r6
 8000446:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800044a:	fb04 f808 	mul.w	r8, r4, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x26a>
 8000452:	18ff      	adds	r7, r7, r3
 8000454:	f104 30ff 	add.w	r0, r4, #4294967295
 8000458:	d228      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d926      	bls.n	80004ac <__udivmoddi4+0x2b4>
 800045e:	3c02      	subs	r4, #2
 8000460:	441f      	add	r7, r3
 8000462:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000466:	ebc8 0707 	rsb	r7, r8, r7
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	4644      	mov	r4, r8
 8000472:	464e      	mov	r6, r9
 8000474:	d314      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	d029      	beq.n	80004cc <__udivmoddi4+0x2d4>
 8000478:	b365      	cbz	r5, 80004d4 <__udivmoddi4+0x2dc>
 800047a:	ebba 0304 	subs.w	r3, sl, r4
 800047e:	eb67 0706 	sbc.w	r7, r7, r6
 8000482:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000486:	40cb      	lsrs	r3, r1
 8000488:	40cf      	lsrs	r7, r1
 800048a:	ea4e 0303 	orr.w	r3, lr, r3
 800048e:	e885 0088 	stmia.w	r5, {r3, r7}
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	4613      	mov	r3, r2
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x96>
 800049c:	4610      	mov	r0, r2
 800049e:	e6e0      	b.n	8000262 <__udivmoddi4+0x6a>
 80004a0:	ebb8 0402 	subs.w	r4, r8, r2
 80004a4:	eb69 0603 	sbc.w	r6, r9, r3
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7e5      	b.n	8000478 <__udivmoddi4+0x280>
 80004ac:	4604      	mov	r4, r0
 80004ae:	e7d8      	b.n	8000462 <__udivmoddi4+0x26a>
 80004b0:	4611      	mov	r1, r2
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1e8>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7c0      	b.n	800043a <__udivmoddi4+0x242>
 80004b8:	468a      	mov	sl, r1
 80004ba:	e77c      	b.n	80003b6 <__udivmoddi4+0x1be>
 80004bc:	3b02      	subs	r3, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e748      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xe4>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443e      	add	r6, r7
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x134>
 80004cc:	45c2      	cmp	sl, r8
 80004ce:	d3e7      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80004d0:	463e      	mov	r6, r7
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x280>
 80004d4:	4629      	mov	r1, r5
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_InitTick+0x3c>)
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_InitTick+0x40>)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e6:	4605      	mov	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	7818      	ldrb	r0, [r3, #0]
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f2:	6810      	ldr	r0, [r2, #0]
 80004f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f8:	f000 faae 	bl	8000a58 <HAL_SYSTICK_Config>
 80004fc:	4604      	mov	r4, r0
 80004fe:	b958      	cbnz	r0, 8000518 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d809      	bhi.n	8000518 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 fa62 	bl	80009d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_InitTick+0x44>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
 8000516:	bd38      	pop	{r3, r4, r5, pc}
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
  {
    return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051a:	bd38      	pop	{r3, r4, r5, pc}
 800051c:	20000088 	.word	0x20000088
 8000520:	20000004 	.word	0x20000004
 8000524:	20000000 	.word	0x20000000

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 fa33 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ffc8 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f001 fb68 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	4904      	ldr	r1, [pc, #16]	; (8000570 <HAL_IncTick+0x14>)
 8000560:	6813      	ldr	r3, [r2, #0]
 8000562:	7809      	ldrb	r1, [r1, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	200000a8 	.word	0x200000a8
 8000570:	20000004 	.word	0x20000004

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200000a8 	.word	0x200000a8

08000580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000582:	4604      	mov	r4, r0
 8000584:	2800      	cmp	r0, #0
 8000586:	f000 809a 	beq.w	80006be <HAL_ADC_Init+0x13e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800058a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800058c:	b925      	cbnz	r5, 8000598 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800058e:	f001 f979 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000592:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000594:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059a:	06db      	lsls	r3, r3, #27
 800059c:	f100 808a 	bmi.w	80006b4 <HAL_ADC_Init+0x134>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005a6:	f023 0302 	bic.w	r3, r3, #2
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005b0:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <HAL_ADC_Init+0x144>)
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005b8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ba:	6859      	ldr	r1, [r3, #4]
 80005bc:	6862      	ldr	r2, [r4, #4]
 80005be:	430a      	orrs	r2, r1
 80005c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c4:	6921      	ldr	r1, [r4, #16]
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c6:	685a      	ldr	r2, [r3, #4]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005ce:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005de:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e0:	6859      	ldr	r1, [r3, #4]
 80005e2:	68a2      	ldr	r2, [r4, #8]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f0:	6899      	ldr	r1, [r3, #8]
 80005f2:	68e2      	ldr	r2, [r4, #12]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005f8:	4a33      	ldr	r2, [pc, #204]	; (80006c8 <HAL_ADC_Init+0x148>)
 80005fa:	4290      	cmp	r0, r2
 80005fc:	d00e      	beq.n	800061c <HAL_ADC_Init+0x9c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000604:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	4302      	orrs	r2, r0
 800060a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000614:	6899      	ldr	r1, [r3, #8]
 8000616:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000618:	430a      	orrs	r2, r1
 800061a:	e006      	b.n	800062a <HAL_ADC_Init+0xaa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800061c:	689a      	ldr	r2, [r3, #8]
 800061e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000622:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800062a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800062c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800062e:	7e21      	ldrb	r1, [r4, #24]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000630:	f022 0202 	bic.w	r2, r2, #2
 8000634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800063c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800063e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000642:	b16a      	cbz	r2, 8000660 <HAL_ADC_Init+0xe0>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800064a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800064c:	685a      	ldr	r2, [r3, #4]
 800064e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000652:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000654:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000656:	6859      	ldr	r1, [r3, #4]
 8000658:	3a01      	subs	r2, #1
 800065a:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 800065e:	e002      	b.n	8000666 <HAL_ADC_Init+0xe6>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000660:	685a      	ldr	r2, [r3, #4]
 8000662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000666:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000670:	69e2      	ldr	r2, [r4, #28]
 8000672:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000674:	3a01      	subs	r2, #1
 8000676:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800067c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800067e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000682:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800068e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000690:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000692:	6961      	ldr	r1, [r4, #20]
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000698:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800069a:	689a      	ldr	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800069c:	2000      	movs	r0, #0
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800069e:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006a2:	609a      	str	r2, [r3, #8]
    
    /* Set ADC parameters */
    ADC_Init(hadc);
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a4:	6460      	str	r0, [r4, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006a8:	f023 0303 	bic.w	r3, r3, #3
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6423      	str	r3, [r4, #64]	; 0x40
 80006b2:	e000      	b.n	80006b6 <HAL_ADC_Init+0x136>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006b4:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006b6:	2300      	movs	r3, #0
 80006b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006bc:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80006be:	2001      	movs	r0, #1
  /* Release Lock */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80006c0:	bd38      	pop	{r3, r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	40012300 	.word	0x40012300
 80006c8:	0f000001 	.word	0x0f000001

080006cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80006cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80006ce:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80006d0:	2200      	movs	r2, #0
 80006d2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006d4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80006d8:	2a01      	cmp	r2, #1
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80006da:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006dc:	d076      	beq.n	80007cc <HAL_ADC_Start_DMA+0x100>
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006de:	6805      	ldr	r5, [r0, #0]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006e6:	68aa      	ldr	r2, [r5, #8]
 80006e8:	07d0      	lsls	r0, r2, #31
 80006ea:	d503      	bpl.n	80006f4 <HAL_ADC_Start_DMA+0x28>
      counter--;
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006ec:	68aa      	ldr	r2, [r5, #8]
 80006ee:	07d2      	lsls	r2, r2, #31
 80006f0:	d413      	bmi.n	800071a <HAL_ADC_Start_DMA+0x4e>
 80006f2:	e055      	b.n	80007a0 <HAL_ADC_Start_DMA+0xd4>
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006f4:	68aa      	ldr	r2, [r5, #8]
 80006f6:	f042 0201 	orr.w	r2, r2, #1
 80006fa:	60aa      	str	r2, [r5, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006fc:	4a35      	ldr	r2, [pc, #212]	; (80007d4 <HAL_ADC_Start_DMA+0x108>)
 80006fe:	6810      	ldr	r0, [r2, #0]
 8000700:	4a35      	ldr	r2, [pc, #212]	; (80007d8 <HAL_ADC_Start_DMA+0x10c>)
 8000702:	fbb0 f0f2 	udiv	r0, r0, r2
 8000706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800070a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 800070c:	9a01      	ldr	r2, [sp, #4]
 800070e:	2a00      	cmp	r2, #0
 8000710:	d0ec      	beq.n	80006ec <HAL_ADC_Start_DMA+0x20>
    {
      counter--;
 8000712:	9a01      	ldr	r2, [sp, #4]
 8000714:	3a01      	subs	r2, #1
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e7f8      	b.n	800070c <HAL_ADC_Start_DMA+0x40>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800071a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800071c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000720:	f020 0001 	bic.w	r0, r0, #1
 8000724:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000728:	6420      	str	r0, [r4, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800072a:	686a      	ldr	r2, [r5, #4]
 800072c:	0550      	lsls	r0, r2, #21
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800072e:	bf41      	itttt	mi
 8000730:	6c20      	ldrmi	r0, [r4, #64]	; 0x40
 8000732:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000736:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800073a:	6420      	strmi	r0, [r4, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800073c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800073e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000744:	bf1c      	itt	ne
 8000746:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8000748:	f022 0206 	bicne.w	r2, r2, #6
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800074c:	6462      	str	r2, [r4, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800074e:	2200      	movs	r2, #0
 8000750:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <HAL_ADC_Start_DMA+0x110>)
 8000756:	63c2      	str	r2, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <HAL_ADC_Start_DMA+0x114>)
 800075a:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <HAL_ADC_Start_DMA+0x118>)
 800075e:	64c2      	str	r2, [r0, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000760:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000764:	602a      	str	r2, [r5, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000766:	686a      	ldr	r2, [r5, #4]
 8000768:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800076c:	606a      	str	r2, [r5, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800076e:	68aa      	ldr	r2, [r5, #8]
 8000770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000774:	60aa      	str	r2, [r5, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000776:	460a      	mov	r2, r1
 8000778:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 800077c:	f000 fae0 	bl	8000d40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <HAL_ADC_Start_DMA+0x11c>)
 8000782:	491a      	ldr	r1, [pc, #104]	; (80007ec <HAL_ADC_Start_DMA+0x120>)
 8000784:	6853      	ldr	r3, [r2, #4]
 8000786:	f013 0f1f 	tst.w	r3, #31
 800078a:	6823      	ldr	r3, [r4, #0]
 800078c:	d113      	bne.n	80007b6 <HAL_ADC_Start_DMA+0xea>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800078e:	428b      	cmp	r3, r1
 8000790:	d013      	beq.n	80007ba <HAL_ADC_Start_DMA+0xee>
 8000792:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000796:	428b      	cmp	r3, r1
 8000798:	d104      	bne.n	80007a4 <HAL_ADC_Start_DMA+0xd8>
 800079a:	6852      	ldr	r2, [r2, #4]
 800079c:	06d2      	lsls	r2, r2, #27
 800079e:	d00c      	beq.n	80007ba <HAL_ADC_Start_DMA+0xee>
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80007a0:	2000      	movs	r0, #0
 80007a2:	e014      	b.n	80007ce <HAL_ADC_Start_DMA+0x102>
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80007a4:	4912      	ldr	r1, [pc, #72]	; (80007f0 <HAL_ADC_Start_DMA+0x124>)
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d1fa      	bne.n	80007a0 <HAL_ADC_Start_DMA+0xd4>
 80007aa:	6852      	ldr	r2, [r2, #4]
 80007ac:	f002 021f 	and.w	r2, r2, #31
 80007b0:	2a0f      	cmp	r2, #15
 80007b2:	d902      	bls.n	80007ba <HAL_ADC_Start_DMA+0xee>
 80007b4:	e7f4      	b.n	80007a0 <HAL_ADC_Start_DMA+0xd4>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d1f2      	bne.n	80007a0 <HAL_ADC_Start_DMA+0xd4>
 80007ba:	6898      	ldr	r0, [r3, #8]
 80007bc:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80007c0:	d1ee      	bne.n	80007a0 <HAL_ADC_Start_DMA+0xd4>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	e000      	b.n	80007ce <HAL_ADC_Start_DMA+0x102>
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007cc:	2002      	movs	r0, #2
    }
  }
  
  /* Return function status */
  return HAL_OK;
}
 80007ce:	b003      	add	sp, #12
 80007d0:	bd30      	pop	{r4, r5, pc}
 80007d2:	bf00      	nop
 80007d4:	20000088 	.word	0x20000088
 80007d8:	000f4240 	.word	0x000f4240
 80007dc:	08000817 	.word	0x08000817
 80007e0:	080007f5 	.word	0x080007f5
 80007e4:	08000801 	.word	0x08000801
 80007e8:	40012300 	.word	0x40012300
 80007ec:	40012000 	.word	0x40012000
 80007f0:	40012200 	.word	0x40012200

080007f4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80007f4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80007f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80007f8:	f001 f950 	bl	8001a9c <HAL_ADC_ConvHalfCpltCallback>
 80007fc:	bd08      	pop	{r3, pc}

080007fe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80007fe:	4770      	bx	lr

08000800 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000800:	6b80      	ldr	r0, [r0, #56]	; 0x38
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000802:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000804:	2340      	movs	r3, #64	; 0x40
 8000806:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000808:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000810:	f7ff fff5 	bl	80007fe <HAL_ADC_ErrorCallback>
 8000814:	bd08      	pop	{r3, pc}

08000816 <ADC_DMAConvCplt>:
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000816:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081a:	f012 0f50 	tst.w	r2, #80	; 0x50
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800081e:	b510      	push	{r4, lr}
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000822:	d123      	bne.n	800086c <ADC_DMAConvCplt+0x56>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000828:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	6891      	ldr	r1, [r2, #8]
 800082e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8000832:	d117      	bne.n	8000864 <ADC_DMAConvCplt+0x4e>
 8000834:	7e19      	ldrb	r1, [r3, #24]
 8000836:	b9a9      	cbnz	r1, 8000864 <ADC_DMAConvCplt+0x4e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000838:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800083a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800083e:	d002      	beq.n	8000846 <ADC_DMAConvCplt+0x30>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000840:	6891      	ldr	r1, [r2, #8]
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000842:	0548      	lsls	r0, r1, #21
 8000844:	d40e      	bmi.n	8000864 <ADC_DMAConvCplt+0x4e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000846:	6851      	ldr	r1, [r2, #4]
 8000848:	f021 0120 	bic.w	r1, r1, #32
 800084c:	6051      	str	r1, [r2, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800084e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000854:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	04d1      	lsls	r1, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800085a:	bf5e      	ittt	pl
 800085c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800085e:	f042 0201 	orrpl.w	r2, r2, #1
 8000862:	641a      	strpl	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000864:	4618      	mov	r0, r3
 8000866:	f001 f92d 	bl	8001ac4 <HAL_ADC_ConvCpltCallback>
 800086a:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else /* DMA and-or internal error occurred */
  {
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800086c:	06d2      	lsls	r2, r2, #27
 800086e:	d503      	bpl.n	8000878 <ADC_DMAConvCplt+0x62>
    {
      /* Call HAL ADC Error Callback function */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffc4 	bl	80007fe <HAL_ADC_ErrorCallback>
 8000876:	bd10      	pop	{r4, pc}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
	else
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
  }
}
 800087a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
	else
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4718      	bx	r3
	...

08000884 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000886:	2300      	movs	r3, #0
 8000888:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800088a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800088e:	2b01      	cmp	r3, #1
 8000890:	d069      	beq.n	8000966 <HAL_ADC_ConfigChannel+0xe2>
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000892:	680d      	ldr	r5, [r1, #0]
 8000894:	6804      	ldr	r4, [r0, #0]
 8000896:	688f      	ldr	r7, [r1, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000898:	2301      	movs	r3, #1
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800089a:	2d09      	cmp	r5, #9
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800089c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80008a0:	b2ae      	uxth	r6, r5
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008a2:	d910      	bls.n	80008c6 <HAL_ADC_ConfigChannel+0x42>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80008a4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80008a8:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80008ac:	f1a2 031e 	sub.w	r3, r2, #30
 80008b0:	2207      	movs	r2, #7
 80008b2:	409a      	lsls	r2, r3
 80008b4:	ea2e 0202 	bic.w	r2, lr, r2
 80008b8:	60e2      	str	r2, [r4, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ba:	68e2      	ldr	r2, [r4, #12]
 80008bc:	fa07 f303 	lsl.w	r3, r7, r3
 80008c0:	4313      	orrs	r3, r2
 80008c2:	60e3      	str	r3, [r4, #12]
 80008c4:	e00e      	b.n	80008e4 <HAL_ADC_ConfigChannel+0x60>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008c6:	6922      	ldr	r2, [r4, #16]
 80008c8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008cc:	f04f 0e07 	mov.w	lr, #7
 80008d0:	fa0e fe03 	lsl.w	lr, lr, r3
 80008d4:	ea22 020e 	bic.w	r2, r2, lr
 80008d8:	6122      	str	r2, [r4, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008da:	6922      	ldr	r2, [r4, #16]
 80008dc:	fa07 f303 	lsl.w	r3, r7, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	6123      	str	r3, [r4, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80008e4:	684b      	ldr	r3, [r1, #4]
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80008ec:	d80d      	bhi.n	800090a <HAL_ADC_ConfigChannel+0x86>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008ee:	4413      	add	r3, r2
 80008f0:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008f2:	1f59      	subs	r1, r3, #5
 80008f4:	231f      	movs	r3, #31
 80008f6:	408b      	lsls	r3, r1
 80008f8:	ea27 0303 	bic.w	r3, r7, r3
 80008fc:	6363      	str	r3, [r4, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000900:	fa06 f101 	lsl.w	r1, r6, r1
 8000904:	4311      	orrs	r1, r2
 8000906:	6361      	str	r1, [r4, #52]	; 0x34
 8000908:	e01d      	b.n	8000946 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800090a:	2b0c      	cmp	r3, #12
 800090c:	d80e      	bhi.n	800092c <HAL_ADC_ConfigChannel+0xa8>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800090e:	4413      	add	r3, r2
 8000910:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000912:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000916:	231f      	movs	r3, #31
 8000918:	4093      	lsls	r3, r2
 800091a:	ea21 0303 	bic.w	r3, r1, r3
 800091e:	6323      	str	r3, [r4, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000920:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000922:	fa06 f202 	lsl.w	r2, r6, r2
 8000926:	431a      	orrs	r2, r3
 8000928:	6322      	str	r2, [r4, #48]	; 0x30
 800092a:	e00c      	b.n	8000946 <HAL_ADC_ConfigChannel+0xc2>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800092c:	4413      	add	r3, r2
 800092e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000930:	3b41      	subs	r3, #65	; 0x41
 8000932:	221f      	movs	r2, #31
 8000934:	409a      	lsls	r2, r3
 8000936:	ea27 0202 	bic.w	r2, r7, r2
 800093a:	62e2      	str	r2, [r4, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800093c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800093e:	fa06 f203 	lsl.w	r2, r6, r3
 8000942:	430a      	orrs	r2, r1
 8000944:	62e2      	str	r2, [r4, #44]	; 0x2c
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_ADC_ConfigChannel+0x11c>)
 8000948:	429c      	cmp	r4, r3
 800094a:	d004      	beq.n	8000956 <HAL_ADC_ConfigChannel+0xd2>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800094c:	2300      	movs	r3, #0
 800094e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000952:	4618      	mov	r0, r3
 8000954:	e022      	b.n	800099c <HAL_ADC_ConfigChannel+0x118>
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000956:	2d12      	cmp	r5, #18
 8000958:	d107      	bne.n	800096a <HAL_ADC_ConfigChannel+0xe6>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <HAL_ADC_ConfigChannel+0x120>)
 800095c:	6853      	ldr	r3, [r2, #4]
 800095e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000962:	6053      	str	r3, [r2, #4]
 8000964:	e001      	b.n	800096a <HAL_ADC_ConfigChannel+0xe6>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000966:	2002      	movs	r0, #2
 8000968:	e018      	b.n	800099c <HAL_ADC_ConfigChannel+0x118>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800096a:	f1a5 0310 	sub.w	r3, r5, #16
 800096e:	2b01      	cmp	r3, #1
 8000970:	d8ec      	bhi.n	800094c <HAL_ADC_ConfigChannel+0xc8>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <HAL_ADC_ConfigChannel+0x120>)
 8000974:	6853      	ldr	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000976:	2d10      	cmp	r5, #16
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800097c:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800097e:	d1e5      	bne.n	800094c <HAL_ADC_ConfigChannel+0xc8>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_ADC_ConfigChannel+0x124>)
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_ADC_ConfigChannel+0x128>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	fbb3 f2f2 	udiv	r2, r3, r2
 800098a:	230a      	movs	r3, #10
 800098c:	4353      	muls	r3, r2
      while(counter != 0U)
      {
        counter--;
 800098e:	9301      	str	r3, [sp, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
      while(counter != 0U)
 8000990:	9b01      	ldr	r3, [sp, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0da      	beq.n	800094c <HAL_ADC_ConfigChannel+0xc8>
      {
        counter--;
 8000996:	9b01      	ldr	r3, [sp, #4]
 8000998:	3b01      	subs	r3, #1
 800099a:	e7f8      	b.n	800098e <HAL_ADC_ConfigChannel+0x10a>
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return HAL_OK;
}
 800099c:	b003      	add	sp, #12
 800099e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a0:	40012000 	.word	0x40012000
 80009a4:	40012300 	.word	0x40012300
 80009a8:	20000088 	.word	0x20000088
 80009ac:	000f4240 	.word	0x000f4240

080009b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009b2:	68d3      	ldr	r3, [r2, #12]
 80009b4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009b8:	041b      	lsls	r3, r3, #16
 80009ba:	0c1b      	lsrs	r3, r3, #16
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80009c0:	0200      	lsls	r0, r0, #8
 80009c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80009ca:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80009cc:	60d3      	str	r3, [r2, #12]
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <HAL_NVIC_SetPriority+0x60>)
 80009d6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009dc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009de:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	2c04      	cmp	r4, #4
 80009e6:	bf28      	it	cs
 80009e8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	2d06      	cmp	r5, #6

  return (
 80009ec:	f04f 0501 	mov.w	r5, #1
 80009f0:	fa05 f404 	lsl.w	r4, r5, r4
 80009f4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f8:	bf8c      	ite	hi
 80009fa:	3b03      	subhi	r3, #3
 80009fc:	2300      	movls	r3, #0

  return (
 80009fe:	400c      	ands	r4, r1
 8000a00:	409c      	lsls	r4, r3
 8000a02:	fa05 f303 	lsl.w	r3, r5, r3
 8000a06:	3b01      	subs	r3, #1
 8000a08:	401a      	ands	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000a0c:	ea42 0204 	orr.w	r2, r2, r4
 8000a10:	ea4f 1202 	mov.w	r2, r2, lsl #4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	bfad      	iteet	ge
 8000a16:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1a:	f000 000f 	andlt.w	r0, r0, #15
 8000a1e:	4b06      	ldrlt	r3, [pc, #24]	; (8000a38 <HAL_NVIC_SetPriority+0x64>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	bfb5      	itete	lt
 8000a26:	b2d2      	uxtblt	r2, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	b2d2      	uxtbge	r2, r2
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	541a      	strblt	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a30:	bd30      	pop	{r4, r5, pc}
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00
 8000a38:	e000ed14 	.word	0xe000ed14

08000a3c <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	db08      	blt.n	8000a52 <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a40:	0942      	lsrs	r2, r0, #5
 8000a42:	2301      	movs	r3, #1
 8000a44:	f000 001f 	and.w	r0, r0, #31
 8000a48:	fa03 f000 	lsl.w	r0, r3, r0
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <HAL_NVIC_EnableIRQ+0x18>)
 8000a4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a58:	3801      	subs	r0, #1
 8000a5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5e:	d20a      	bcs.n	8000a76 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_SYSTICK_Config+0x24>)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	4a07      	ldr	r2, [pc, #28]	; (8000a80 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a64:	6058      	str	r0, [r3, #4]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a66:	21f0      	movs	r1, #240	; 0xf0
 8000a68:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000a84:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000a86:	4604      	mov	r4, r0
 8000a88:	b168      	cbz	r0, 8000aa6 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000a8a:	7903      	ldrb	r3, [r0, #4]
 8000a8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a90:	b913      	cbnz	r3, 8000a98 <HAL_DAC_Init+0x14>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000a92:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000a94:	f000 ff4c 	bl	8001930 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000a9c:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000a9e:	2301      	movs	r3, #1
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000aa0:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000aa2:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000aa4:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
  {
     return HAL_ERROR;
 8000aa6:	2001      	movs	r0, #1
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8000aa8:	bd10      	pop	{r4, pc}
	...

08000aac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000ab0:	7940      	ldrb	r0, [r0, #5]
 8000ab2:	2801      	cmp	r0, #1
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000ab4:	460e      	mov	r6, r1
 8000ab6:	f04f 0002 	mov.w	r0, #2
 8000aba:	4611      	mov	r1, r2
 8000abc:	9a06      	ldr	r2, [sp, #24]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000abe:	d04c      	beq.n	8000b5a <HAL_DAC_Start_DMA+0xae>
 8000ac0:	2401      	movs	r4, #1
 8000ac2:	716c      	strb	r4, [r5, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ac4:	7128      	strb	r0, [r5, #4]
 8000ac6:	682c      	ldr	r4, [r5, #0]

  if(Channel == DAC_CHANNEL_1)
 8000ac8:	b9c6      	cbnz	r6, 8000afc <HAL_DAC_Start_DMA+0x50>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000aca:	68a8      	ldr	r0, [r5, #8]
 8000acc:	4f23      	ldr	r7, [pc, #140]	; (8000b5c <HAL_DAC_Start_DMA+0xb0>)
 8000ace:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ad0:	4f23      	ldr	r7, [pc, #140]	; (8000b60 <HAL_DAC_Start_DMA+0xb4>)
 8000ad2:	6407      	str	r7, [r0, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000ad4:	4f23      	ldr	r7, [pc, #140]	; (8000b64 <HAL_DAC_Start_DMA+0xb8>)
 8000ad6:	64c7      	str	r7, [r0, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8000ad8:	6827      	ldr	r7, [r4, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000ada:	2a04      	cmp	r2, #4

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8000adc:	f447 5780 	orr.w	r7, r7, #4096	; 0x1000
 8000ae0:	6027      	str	r7, [r4, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8000ae2:	d005      	beq.n	8000af0 <HAL_DAC_Start_DMA+0x44>
 8000ae4:	2a08      	cmp	r2, #8
 8000ae6:	d006      	beq.n	8000af6 <HAL_DAC_Start_DMA+0x4a>
 8000ae8:	bb32      	cbnz	r2, 8000b38 <HAL_DAC_Start_DMA+0x8c>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000aea:	f104 0208 	add.w	r2, r4, #8
        break;
 8000aee:	e024      	b.n	8000b3a <HAL_DAC_Start_DMA+0x8e>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000af0:	f104 020c 	add.w	r2, r4, #12
        break;
 8000af4:	e021      	b.n	8000b3a <HAL_DAC_Start_DMA+0x8e>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000af6:	f104 0210 	add.w	r2, r4, #16
        break;
 8000afa:	e01e      	b.n	8000b3a <HAL_DAC_Start_DMA+0x8e>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000afc:	68e8      	ldr	r0, [r5, #12]
 8000afe:	4f1a      	ldr	r7, [pc, #104]	; (8000b68 <HAL_DAC_Start_DMA+0xbc>)
 8000b00:	63c7      	str	r7, [r0, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000b02:	4f1a      	ldr	r7, [pc, #104]	; (8000b6c <HAL_DAC_Start_DMA+0xc0>)
 8000b04:	6407      	str	r7, [r0, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000b06:	4f1a      	ldr	r7, [pc, #104]	; (8000b70 <HAL_DAC_Start_DMA+0xc4>)
 8000b08:	64c7      	str	r7, [r0, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8000b0a:	6827      	ldr	r7, [r4, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8000b0c:	2a04      	cmp	r2, #4

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8000b0e:	f047 5780 	orr.w	r7, r7, #268435456	; 0x10000000
 8000b12:	6027      	str	r7, [r4, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8000b14:	d005      	beq.n	8000b22 <HAL_DAC_Start_DMA+0x76>
 8000b16:	2a08      	cmp	r2, #8
 8000b18:	d006      	beq.n	8000b28 <HAL_DAC_Start_DMA+0x7c>
 8000b1a:	b942      	cbnz	r2, 8000b2e <HAL_DAC_Start_DMA+0x82>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000b1c:	f104 0214 	add.w	r2, r4, #20
        break;
 8000b20:	e006      	b.n	8000b30 <HAL_DAC_Start_DMA+0x84>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000b22:	f104 0218 	add.w	r2, r4, #24
        break;
 8000b26:	e003      	b.n	8000b30 <HAL_DAC_Start_DMA+0x84>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000b28:	f104 021c 	add.w	r2, r4, #28
        break;
 8000b2c:	e000      	b.n	8000b30 <HAL_DAC_Start_DMA+0x84>
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
  uint32_t tmpreg = 0U;
 8000b2e:	2200      	movs	r2, #0
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b30:	6827      	ldr	r7, [r4, #0]
 8000b32:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8000b36:	e003      	b.n	8000b40 <HAL_DAC_Start_DMA+0x94>
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
  uint32_t tmpreg = 0U;
 8000b38:	4632      	mov	r2, r6
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b3a:	6827      	ldr	r7, [r4, #0]
 8000b3c:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8000b40:	6027      	str	r7, [r4, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000b42:	f000 f8fd 	bl	8000d40 <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000b46:	6829      	ldr	r1, [r5, #0]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	680b      	ldr	r3, [r1, #0]
 8000b4c:	fa02 f606 	lsl.w	r6, r2, r6
 8000b50:	431e      	orrs	r6, r3
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000b52:	2000      	movs	r0, #0
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000b54:	600e      	str	r6, [r1, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000b56:	7168      	strb	r0, [r5, #5]
  
  /* Return function status */
  return HAL_OK;
 8000b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 8000b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b5c:	08000b77 	.word	0x08000b77
 8000b60:	08000b89 	.word	0x08000b89
 8000b64:	08000b95 	.word	0x08000b95
 8000b68:	08000bf5 	.word	0x08000bf5
 8000b6c:	08000c05 	.word	0x08000c05
 8000b70:	08000c0f 	.word	0x08000c0f

08000b74 <HAL_DAC_ConvCpltCallbackCh1>:
 8000b74:	4770      	bx	lr

08000b76 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000b76:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b78:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f7ff fffa 	bl	8000b74 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8000b80:	2301      	movs	r3, #1
 8000b82:	7123      	strb	r3, [r4, #4]
 8000b84:	bd10      	pop	{r4, pc}

08000b86 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8000b86:	4770      	bx	lr

08000b88 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000b88:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000b8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000b8c:	f7ff fffb 	bl	8000b86 <HAL_DAC_ConvHalfCpltCallbackCh1>
 8000b90:	bd08      	pop	{r3, pc}

08000b92 <HAL_DAC_ErrorCallbackCh1>:
 8000b92:	4770      	bx	lr

08000b94 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000b94:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b96:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000b98:	6923      	ldr	r3, [r4, #16]
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f7ff fff6 	bl	8000b92 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	7123      	strb	r3, [r4, #4]
 8000baa:	bd10      	pop	{r4, pc}

08000bac <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000bac:	7943      	ldrb	r3, [r0, #5]
 8000bae:	2b01      	cmp	r3, #1
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
 8000bb2:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000bb6:	d018      	beq.n	8000bea <HAL_DAC_ConfigChannel+0x3e>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000bb8:	6806      	ldr	r6, [r0, #0]
  
  /* Process locked */
  __HAL_LOCK(hdac);
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bba:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000bbc:	6835      	ldr	r5, [r6, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000bbe:	f640 73fe 	movw	r3, #4094	; 0xffe
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	ea25 0403 	bic.w	r4, r5, r3
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000bc8:	e891 0028 	ldmia.w	r1, {r3, r5}
 8000bcc:	432b      	orrs	r3, r5
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000bd2:	6033      	str	r3, [r6, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000bd4:	6833      	ldr	r3, [r6, #0]
 8000bd6:	21c0      	movs	r1, #192	; 0xc0
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000be0:	2301      	movs	r3, #1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000be2:	6032      	str	r2, [r6, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000be4:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000be6:	2300      	movs	r3, #0
 8000be8:	7143      	strb	r3, [r0, #5]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000bea:	4618      	mov	r0, r3
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
  
  /* Return function status */
  return HAL_OK;
}
 8000bec:	bd70      	pop	{r4, r5, r6, pc}

08000bee <HAL_DACEx_ConvCpltCallbackCh2>:
 8000bee:	4770      	bx	lr

08000bf0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8000bf0:	4770      	bx	lr

08000bf2 <HAL_DACEx_ErrorCallbackCh2>:
 8000bf2:	4770      	bx	lr

08000bf4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000bf4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000bf6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f7ff fff8 	bl	8000bee <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	7123      	strb	r3, [r4, #4]
 8000c02:	bd10      	pop	{r4, pc}

08000c04 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000c04:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000c06:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000c08:	f7ff fff2 	bl	8000bf0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
 8000c0c:	bd08      	pop	{r3, pc}

08000c0e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000c0e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c10:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000c12:	6923      	ldr	r3, [r4, #16]
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f7ff ffe9 	bl	8000bf2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8000c20:	2301      	movs	r3, #1
 8000c22:	7123      	strb	r3, [r4, #4]
 8000c24:	bd10      	pop	{r4, pc}
	...

08000c28 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c28:	6803      	ldr	r3, [r0, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c30:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000c34:	2118      	movs	r1, #24
 8000c36:	3a10      	subs	r2, #16
 8000c38:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c3c:	4904      	ldr	r1, [pc, #16]	; (8000c50 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000c3e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000c40:	bf88      	it	hi
 8000c42:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c44:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000c46:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000c48:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8000c4a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	080021c0 	.word	0x080021c0

08000c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff fc8c 	bl	8000574 <HAL_GetTick>
 8000c5c:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d064      	beq.n	8000d2c <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c62:	2300      	movs	r3, #0
 8000c64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c68:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c70:	6813      	ldr	r3, [r2, #0]
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c78:	6820      	ldr	r0, [r4, #0]
 8000c7a:	6803      	ldr	r3, [r0, #0]
 8000c7c:	07d9      	lsls	r1, r3, #31
 8000c7e:	d508      	bpl.n	8000c92 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c80:	f7ff fc78 	bl	8000574 <HAL_GetTick>
 8000c84:	1b40      	subs	r0, r0, r5
 8000c86:	2805      	cmp	r0, #5
 8000c88:	d9f6      	bls.n	8000c78 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c8e:	2003      	movs	r0, #3
 8000c90:	e051      	b.n	8000d36 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c92:	6803      	ldr	r3, [r0, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c94:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c96:	6861      	ldr	r1, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c98:	69a5      	ldr	r5, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c9a:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c9c:	68a3      	ldr	r3, [r4, #8]
 8000c9e:	4319      	orrs	r1, r3
 8000ca0:	68e3      	ldr	r3, [r4, #12]
 8000ca2:	4319      	orrs	r1, r3
 8000ca4:	6923      	ldr	r3, [r4, #16]
 8000ca6:	4319      	orrs	r1, r3
 8000ca8:	6963      	ldr	r3, [r4, #20]
 8000caa:	430b      	orrs	r3, r1
 8000cac:	69e1      	ldr	r1, [r4, #28]
 8000cae:	432b      	orrs	r3, r5
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6a21      	ldr	r1, [r4, #32]
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cba:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000cbc:	bf01      	itttt	eq
 8000cbe:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8000cc0:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8000cc2:	4331      	orreq	r1, r6
 8000cc4:	430b      	orreq	r3, r1
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000cc6:	6003      	str	r3, [r0, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000cc8:	6943      	ldr	r3, [r0, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cca:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ccc:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000cd0:	ea43 0302 	orr.w	r3, r3, r2

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cd4:	d11c      	bne.n	8000d10 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cd6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cda:	4313      	orrs	r3, r2
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cdc:	b1c1      	cbz	r1, 8000d10 <HAL_DMA_Init+0xbc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000cde:	b925      	cbnz	r5, 8000cea <HAL_DMA_Init+0x96>
  {
    switch (tmp)
 8000ce0:	2a01      	cmp	r2, #1
 8000ce2:	d00b      	beq.n	8000cfc <HAL_DMA_Init+0xa8>
 8000ce4:	d312      	bcc.n	8000d0c <HAL_DMA_Init+0xb8>
 8000ce6:	2a02      	cmp	r2, #2
 8000ce8:	e00f      	b.n	8000d0a <HAL_DMA_Init+0xb6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000cea:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000cee:	d109      	bne.n	8000d04 <HAL_DMA_Init+0xb0>
  {
    switch (tmp)
 8000cf0:	2a03      	cmp	r2, #3
 8000cf2:	d80d      	bhi.n	8000d10 <HAL_DMA_Init+0xbc>
 8000cf4:	e8df f002 	tbb	[pc, r2]
 8000cf8:	021c0a1c 	.word	0x021c0a1c
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000cfc:	f1b1 7fc0 	cmp.w	r1, #25165824	; 0x1800000
 8000d00:	d106      	bne.n	8000d10 <HAL_DMA_Init+0xbc>
 8000d02:	e015      	b.n	8000d30 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000d04:	2a02      	cmp	r2, #2
 8000d06:	d913      	bls.n	8000d30 <HAL_DMA_Init+0xdc>
 8000d08:	2a03      	cmp	r2, #3
 8000d0a:	d101      	bne.n	8000d10 <HAL_DMA_Init+0xbc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000d0c:	01ca      	lsls	r2, r1, #7
 8000d0e:	d40f      	bmi.n	8000d30 <HAL_DMA_Init+0xdc>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000d10:	6143      	str	r3, [r0, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ff88 	bl	8000c28 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d18:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d1a:	233f      	movs	r3, #63	; 0x3f
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d20:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d22:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d24:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8000d2a:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	bd70      	pop	{r4, r5, r6, pc}
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000d30:	2340      	movs	r3, #64	; 0x40
 8000d32:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000d34:	2001      	movs	r0, #1
 8000d36:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	f010803f 	.word	0xf010803f

08000d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d40:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d42:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000d46:	2c01      	cmp	r4, #1
 8000d48:	d038      	beq.n	8000dbc <HAL_DMA_Start_IT+0x7c>
 8000d4a:	2401      	movs	r4, #1
 8000d4c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d50:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d54:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d56:	2c01      	cmp	r4, #1
 8000d58:	f04f 0500 	mov.w	r5, #0
 8000d5c:	f04f 0402 	mov.w	r4, #2
 8000d60:	d128      	bne.n	8000db4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d62:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d66:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d68:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d6a:	6825      	ldr	r5, [r4, #0]
 8000d6c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000d70:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d72:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d74:	6883      	ldr	r3, [r0, #8]
 8000d76:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d78:	bf0e      	itee	eq
 8000d7a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000d7c:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000d7e:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d80:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d82:	bf08      	it	eq
 8000d84:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d86:	233f      	movs	r3, #63	; 0x3f
 8000d88:	4093      	lsls	r3, r2
 8000d8a:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	f043 0316 	orr.w	r3, r3, #22
 8000d92:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000d94:	6963      	ldr	r3, [r4, #20]
 8000d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d9a:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000d9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d9e:	b11b      	cbz	r3, 8000da8 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	f043 0308 	orr.w	r3, r3, #8
 8000da6:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6023      	str	r3, [r4, #0]
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8000db0:	2000      	movs	r0, #0
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000db4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000db8:	4620      	mov	r0, r4
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000dbc:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}

08000dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dc6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dc8:	4b59      	ldr	r3, [pc, #356]	; (8000f30 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000dcc:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8000dce:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	421e      	tst	r6, r3
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dd6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000dd8:	d00c      	beq.n	8000df4 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000dda:	6801      	ldr	r1, [r0, #0]
 8000ddc:	6808      	ldr	r0, [r1, #0]
 8000dde:	0740      	lsls	r0, r0, #29
 8000de0:	d508      	bpl.n	8000df4 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000de2:	6808      	ldr	r0, [r1, #0]
 8000de4:	f020 0004 	bic.w	r0, r0, #4
 8000de8:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000dea:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000dec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000df4:	2301      	movs	r3, #1
 8000df6:	4093      	lsls	r3, r2
 8000df8:	421e      	tst	r6, r3
 8000dfa:	d008      	beq.n	8000e0e <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000dfc:	6821      	ldr	r1, [r4, #0]
 8000dfe:	6949      	ldr	r1, [r1, #20]
 8000e00:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000e02:	bf41      	itttt	mi
 8000e04:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000e06:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000e08:	f043 0302 	orrmi.w	r3, r3, #2
 8000e0c:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e0e:	2304      	movs	r3, #4
 8000e10:	4093      	lsls	r3, r2
 8000e12:	421e      	tst	r6, r3
 8000e14:	d008      	beq.n	8000e28 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000e16:	6821      	ldr	r1, [r4, #0]
 8000e18:	6809      	ldr	r1, [r1, #0]
 8000e1a:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000e1c:	bf41      	itttt	mi
 8000e1e:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000e20:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8000e22:	f043 0304 	orrmi.w	r3, r3, #4
 8000e26:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000e28:	2310      	movs	r3, #16
 8000e2a:	fa03 f202 	lsl.w	r2, r3, r2
 8000e2e:	4216      	tst	r6, r2
 8000e30:	d017      	beq.n	8000e62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	6819      	ldr	r1, [r3, #0]
 8000e36:	0709      	lsls	r1, r1, #28
 8000e38:	d513      	bpl.n	8000e62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000e3a:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	0350      	lsls	r0, r2, #13
 8000e40:	d504      	bpl.n	8000e4c <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0319      	lsls	r1, r3, #12
 8000e46:	d508      	bpl.n	8000e5a <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000e48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000e4a:	e007      	b.n	8000e5c <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e50:	bf5e      	ittt	pl
 8000e52:	681a      	ldrpl	r2, [r3, #0]
 8000e54:	f022 0208 	bicpl.w	r2, r2, #8
 8000e58:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e5c:	b10b      	cbz	r3, 8000e62 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000e5e:	4620      	mov	r0, r4
 8000e60:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000e62:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000e64:	2220      	movs	r2, #32
 8000e66:	408a      	lsls	r2, r1
 8000e68:	4216      	tst	r6, r2
 8000e6a:	d03b      	beq.n	8000ee4 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	06c6      	lsls	r6, r0, #27
 8000e72:	d537      	bpl.n	8000ee4 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000e74:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e76:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000e7a:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e7c:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000e7e:	d119      	bne.n	8000eb4 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e80:	f022 0216 	bic.w	r2, r2, #22
 8000e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000e90:	b90a      	cbnz	r2, 8000e96 <HAL_DMA_IRQHandler+0xd6>
 8000e92:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000e94:	b11a      	cbz	r2, 8000e9e <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f022 0208 	bic.w	r2, r2, #8
 8000e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e9e:	233f      	movs	r3, #63	; 0x3f
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000eb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000eb2:	e037      	b.n	8000f24 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000eb4:	0350      	lsls	r0, r2, #13
 8000eb6:	d504      	bpl.n	8000ec2 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0319      	lsls	r1, r3, #12
 8000ebc:	d40e      	bmi.n	8000edc <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ec0:	e00d      	b.n	8000ede <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000ec8:	d108      	bne.n	8000edc <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000eca:	6819      	ldr	r1, [r3, #0]
 8000ecc:	f021 0110 	bic.w	r1, r1, #16
 8000ed0:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ed2:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000ed4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ede:	b10b      	cbz	r3, 8000ee4 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000ee4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ee6:	b303      	cbz	r3, 8000f2a <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000ee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eea:	07da      	lsls	r2, r3, #31
 8000eec:	d519      	bpl.n	8000f22 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000eee:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ef0:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000ef2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000ef6:	6813      	ldr	r3, [r2, #0]
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 8000efe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000f02:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8000f06:	9b01      	ldr	r3, [sp, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	429f      	cmp	r7, r3
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	d302      	bcc.n	8000f16 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	07db      	lsls	r3, r3, #31
 8000f14:	d4f7      	bmi.n	8000f06 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000f16:	2300      	movs	r3, #0
 8000f18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000f22:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f24:	b10b      	cbz	r3, 8000f2a <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f26:	4620      	mov	r0, r4
 8000f28:	4798      	blx	r3
    }
  }
}
 8000f2a:	b003      	add	sp, #12
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000088 	.word	0x20000088

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	4f6a      	ldr	r7, [pc, #424]	; (80010e4 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80010ec <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80010f0 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000f4e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000f52:	ea34 0303 	bics.w	r3, r4, r3
 8000f56:	f040 80bd 	bne.w	80010d4 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5a:	684d      	ldr	r5, [r1, #4]
 8000f5c:	f025 0a10 	bic.w	sl, r5, #16
 8000f60:	f1ba 0f02 	cmp.w	sl, #2
 8000f64:	d114      	bne.n	8000f90 <HAL_GPIO_Init+0x5c>
 8000f66:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8000f6a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f72:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f76:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f7a:	230f      	movs	r3, #15
 8000f7c:	fa03 f30b 	lsl.w	r3, r3, fp
 8000f80:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	690b      	ldr	r3, [r1, #16]
 8000f86:	fa03 f30b 	lsl.w	r3, r3, fp
 8000f8a:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000f8c:	f8c9 3020 	str.w	r3, [r9, #32]
 8000f90:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f94:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9a:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f9e:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa2:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa6:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000faa:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fae:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb2:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb4:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000fb8:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fba:	d80f      	bhi.n	8000fdc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbc:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc0:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc4:	fa06 f60b 	lsl.w	r6, r6, fp
 8000fc8:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000fca:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fcc:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fce:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd2:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd6:	4096      	lsls	r6, r2
 8000fd8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000fda:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fdc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe2:	688b      	ldr	r3, [r1, #8]
 8000fe4:	fa03 f30b 	lsl.w	r3, r3, fp
 8000fe8:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000fec:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fee:	00eb      	lsls	r3, r5, #3
 8000ff0:	d570      	bpl.n	80010d4 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9303      	str	r3, [sp, #12]
 8000ff6:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001000:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001004:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001008:	f022 0903 	bic.w	r9, r2, #3
 800100c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001010:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001014:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001018:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800101a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001020:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001024:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001028:	260f      	movs	r6, #15
 800102a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001030:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001034:	d01c      	beq.n	8001070 <HAL_GPIO_Init+0x13c>
 8001036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800103a:	4298      	cmp	r0, r3
 800103c:	d01a      	beq.n	8001074 <HAL_GPIO_Init+0x140>
 800103e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001042:	4298      	cmp	r0, r3
 8001044:	d018      	beq.n	8001078 <HAL_GPIO_Init+0x144>
 8001046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800104a:	4298      	cmp	r0, r3
 800104c:	d016      	beq.n	800107c <HAL_GPIO_Init+0x148>
 800104e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001052:	4298      	cmp	r0, r3
 8001054:	d014      	beq.n	8001080 <HAL_GPIO_Init+0x14c>
 8001056:	4540      	cmp	r0, r8
 8001058:	d014      	beq.n	8001084 <HAL_GPIO_Init+0x150>
 800105a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800105e:	4298      	cmp	r0, r3
 8001060:	d012      	beq.n	8001088 <HAL_GPIO_Init+0x154>
 8001062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001066:	4298      	cmp	r0, r3
 8001068:	bf14      	ite	ne
 800106a:	2308      	movne	r3, #8
 800106c:	2307      	moveq	r3, #7
 800106e:	e00c      	b.n	800108a <HAL_GPIO_Init+0x156>
 8001070:	2300      	movs	r3, #0
 8001072:	e00a      	b.n	800108a <HAL_GPIO_Init+0x156>
 8001074:	2301      	movs	r3, #1
 8001076:	e008      	b.n	800108a <HAL_GPIO_Init+0x156>
 8001078:	2302      	movs	r3, #2
 800107a:	e006      	b.n	800108a <HAL_GPIO_Init+0x156>
 800107c:	2303      	movs	r3, #3
 800107e:	e004      	b.n	800108a <HAL_GPIO_Init+0x156>
 8001080:	2304      	movs	r3, #4
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x156>
 8001084:	2305      	movs	r3, #5
 8001086:	e000      	b.n	800108a <HAL_GPIO_Init+0x156>
 8001088:	2306      	movs	r3, #6
 800108a:	fa03 f30a 	lsl.w	r3, r3, sl
 800108e:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001096:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001098:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800109c:	bf0c      	ite	eq
 800109e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80010a0:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80010a2:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80010a6:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010aa:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80010ae:	bf0c      	ite	eq
 80010b0:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80010b2:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80010b4:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b6:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b8:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80010bc:	bf0c      	ite	eq
 80010be:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80010c0:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 80010c2:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80010c6:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ca:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80010cc:	bf54      	ite	pl
 80010ce:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80010d0:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 80010d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010d4:	3201      	adds	r2, #1
 80010d6:	2a10      	cmp	r2, #16
 80010d8:	f47f af38 	bne.w	8000f4c <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80010dc:	b005      	add	sp, #20
 80010de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010e2:	bf00      	nop
 80010e4:	40013c00 	.word	0x40013c00
 80010e8:	40020000 	.word	0x40020000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40021400 	.word	0x40021400

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	4604      	mov	r4, r0
 80010fa:	b908      	cbnz	r0, 8001100 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 80010fc:	2001      	movs	r0, #1
 80010fe:	e170      	b.n	80013e2 <HAL_RCC_OscConfig+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	07dd      	lsls	r5, r3, #31
 8001104:	d403      	bmi.n	800110e <HAL_RCC_OscConfig+0x1a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	0798      	lsls	r0, r3, #30
 800110a:	d44a      	bmi.n	80011a2 <HAL_RCC_OscConfig+0xae>
 800110c:	e08e      	b.n	800122c <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4b9b      	ldr	r3, [pc, #620]	; (800137c <HAL_RCC_OscConfig+0x288>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	f002 020c 	and.w	r2, r2, #12
 8001116:	2a04      	cmp	r2, #4
 8001118:	d007      	beq.n	800112a <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111c:	f002 020c 	and.w	r2, r2, #12
 8001120:	2a08      	cmp	r2, #8
 8001122:	d10a      	bne.n	800113a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	0259      	lsls	r1, r3, #9
 8001128:	d507      	bpl.n	800113a <HAL_RCC_OscConfig+0x46>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	4b94      	ldr	r3, [pc, #592]	; (800137c <HAL_RCC_OscConfig+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	039a      	lsls	r2, r3, #14
 8001130:	d5e9      	bpl.n	8001106 <HAL_RCC_OscConfig+0x12>
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e6      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
 8001138:	e7e0      	b.n	80010fc <HAL_RCC_OscConfig+0x8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	6863      	ldr	r3, [r4, #4]
 800113c:	4d8f      	ldr	r5, [pc, #572]	; (800137c <HAL_RCC_OscConfig+0x288>)
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d006      	beq.n	8001152 <HAL_RCC_OscConfig+0x5e>
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d108      	bne.n	800115c <HAL_RCC_OscConfig+0x68>
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	602b      	str	r3, [r5, #0]
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x7a>
 800115c:	682a      	ldr	r2, [r5, #0]
 800115e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001162:	602a      	str	r2, [r5, #0]
 8001164:	682a      	ldr	r2, [r5, #0]
 8001166:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800116a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800116c:	b16b      	cbz	r3, 800118a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fa01 	bl	8000574 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001172:	4d82      	ldr	r5, [pc, #520]	; (800137c <HAL_RCC_OscConfig+0x288>)

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	682b      	ldr	r3, [r5, #0]
 8001178:	039b      	lsls	r3, r3, #14
 800117a:	d4c4      	bmi.n	8001106 <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff f9fa 	bl	8000574 <HAL_GetTick>
 8001180:	1b80      	subs	r0, r0, r6
 8001182:	2864      	cmp	r0, #100	; 0x64
 8001184:	d9f7      	bls.n	8001176 <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 8001186:	2003      	movs	r0, #3
 8001188:	e12b      	b.n	80013e2 <HAL_RCC_OscConfig+0x2ee>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff f9f3 	bl	8000574 <HAL_GetTick>
 800118e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001190:	682b      	ldr	r3, [r5, #0]
 8001192:	039f      	lsls	r7, r3, #14
 8001194:	d5b7      	bpl.n	8001106 <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001196:	f7ff f9ed 	bl	8000574 <HAL_GetTick>
 800119a:	1b80      	subs	r0, r0, r6
 800119c:	2864      	cmp	r0, #100	; 0x64
 800119e:	d9f7      	bls.n	8001190 <HAL_RCC_OscConfig+0x9c>
 80011a0:	e7f1      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a2:	4b76      	ldr	r3, [pc, #472]	; (800137c <HAL_RCC_OscConfig+0x288>)
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	f012 0f0c 	tst.w	r2, #12
 80011aa:	d007      	beq.n	80011bc <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ac:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	f002 020c 	and.w	r2, r2, #12
 80011b2:	2a08      	cmp	r2, #8
 80011b4:	d111      	bne.n	80011da <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	025e      	lsls	r6, r3, #9
 80011ba:	d40e      	bmi.n	80011da <HAL_RCC_OscConfig+0xe6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011bc:	4b6f      	ldr	r3, [pc, #444]	; (800137c <HAL_RCC_OscConfig+0x288>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	0795      	lsls	r5, r2, #30
 80011c2:	d502      	bpl.n	80011ca <HAL_RCC_OscConfig+0xd6>
 80011c4:	68e2      	ldr	r2, [r4, #12]
 80011c6:	2a01      	cmp	r2, #1
 80011c8:	d198      	bne.n	80010fc <HAL_RCC_OscConfig+0x8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6921      	ldr	r1, [r4, #16]
 80011ce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80011d2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80011d6:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d8:	e028      	b.n	800122c <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011da:	68e2      	ldr	r2, [r4, #12]
 80011dc:	4b68      	ldr	r3, [pc, #416]	; (8001380 <HAL_RCC_OscConfig+0x28c>)
 80011de:	b1ba      	cbz	r2, 8001210 <HAL_RCC_OscConfig+0x11c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff f9c6 	bl	8000574 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	4d64      	ldr	r5, [pc, #400]	; (800137c <HAL_RCC_OscConfig+0x288>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x288>)
 80011f0:	0798      	lsls	r0, r3, #30
 80011f2:	d405      	bmi.n	8001200 <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff f9be 	bl	8000574 <HAL_GetTick>
 80011f8:	1b80      	subs	r0, r0, r6
 80011fa:	2802      	cmp	r0, #2
 80011fc:	d9f6      	bls.n	80011ec <HAL_RCC_OscConfig+0xf8>
 80011fe:	e7c2      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	6921      	ldr	r1, [r4, #16]
 8001204:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001208:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e00d      	b.n	800122c <HAL_RCC_OscConfig+0x138>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff f9af 	bl	8000574 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	4d59      	ldr	r5, [pc, #356]	; (800137c <HAL_RCC_OscConfig+0x288>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	0799      	lsls	r1, r3, #30
 800121e:	d505      	bpl.n	800122c <HAL_RCC_OscConfig+0x138>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff f9a8 	bl	8000574 <HAL_GetTick>
 8001224:	1b80      	subs	r0, r0, r6
 8001226:	2802      	cmp	r0, #2
 8001228:	d9f7      	bls.n	800121a <HAL_RCC_OscConfig+0x126>
 800122a:	e7ac      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	071a      	lsls	r2, r3, #28
 8001230:	d403      	bmi.n	800123a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	075b      	lsls	r3, r3, #29
 8001236:	d420      	bmi.n	800127a <HAL_RCC_OscConfig+0x186>
 8001238:	e082      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800123a:	6962      	ldr	r2, [r4, #20]
 800123c:	4b51      	ldr	r3, [pc, #324]	; (8001384 <HAL_RCC_OscConfig+0x290>)
 800123e:	b172      	cbz	r2, 800125e <HAL_RCC_OscConfig+0x16a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff f996 	bl	8000574 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001248:	4d4c      	ldr	r5, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x288>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800124e:	079f      	lsls	r7, r3, #30
 8001250:	d4ef      	bmi.n	8001232 <HAL_RCC_OscConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff f98f 	bl	8000574 <HAL_GetTick>
 8001256:	1b80      	subs	r0, r0, r6
 8001258:	2802      	cmp	r0, #2
 800125a:	d9f7      	bls.n	800124c <HAL_RCC_OscConfig+0x158>
 800125c:	e793      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff f988 	bl	8000574 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001264:	4d45      	ldr	r5, [pc, #276]	; (800137c <HAL_RCC_OscConfig+0x288>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001266:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001268:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800126a:	0798      	lsls	r0, r3, #30
 800126c:	d5e1      	bpl.n	8001232 <HAL_RCC_OscConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126e:	f7ff f981 	bl	8000574 <HAL_GetTick>
 8001272:	1b80      	subs	r0, r0, r6
 8001274:	2802      	cmp	r0, #2
 8001276:	d9f7      	bls.n	8001268 <HAL_RCC_OscConfig+0x174>
 8001278:	e785      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b40      	ldr	r3, [pc, #256]	; (800137c <HAL_RCC_OscConfig+0x288>)
 800127c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127e:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x1a8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001288:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001298:	2601      	movs	r6, #1
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x1aa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800129c:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129e:	4d3a      	ldr	r5, [pc, #232]	; (8001388 <HAL_RCC_OscConfig+0x294>)
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	05d9      	lsls	r1, r3, #23
 80012a4:	d504      	bpl.n	80012b0 <HAL_RCC_OscConfig+0x1bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a6:	68a3      	ldr	r3, [r4, #8]
 80012a8:	4d34      	ldr	r5, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x288>)
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d110      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1dc>
 80012ae:	e015      	b.n	80012dc <HAL_RCC_OscConfig+0x1e8>
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	602b      	str	r3, [r5, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012b8:	f7ff f95c 	bl	8000574 <HAL_GetTick>
 80012bc:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	05da      	lsls	r2, r3, #23
 80012c2:	d4f0      	bmi.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c4:	f7ff f956 	bl	8000574 <HAL_GetTick>
 80012c8:	1bc0      	subs	r0, r0, r7
 80012ca:	2802      	cmp	r0, #2
 80012cc:	d9f7      	bls.n	80012be <HAL_RCC_OscConfig+0x1ca>
 80012ce:	e75a      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d108      	bne.n	80012e6 <HAL_RCC_OscConfig+0x1f2>
 80012d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	672b      	str	r3, [r5, #112]	; 0x70
 80012dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	672b      	str	r3, [r5, #112]	; 0x70
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x204>
 80012e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012e8:	f022 0201 	bic.w	r2, r2, #1
 80012ec:	672a      	str	r2, [r5, #112]	; 0x70
 80012ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80012f0:	f022 0204 	bic.w	r2, r2, #4
 80012f4:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012f6:	b173      	cbz	r3, 8001316 <HAL_RCC_OscConfig+0x222>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f8:	f7ff f93c 	bl	8000574 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	4d1f      	ldr	r5, [pc, #124]	; (800137c <HAL_RCC_OscConfig+0x288>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001300:	f241 3888 	movw	r8, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001304:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001306:	079b      	lsls	r3, r3, #30
 8001308:	d40d      	bmi.n	8001326 <HAL_RCC_OscConfig+0x232>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff f933 	bl	8000574 <HAL_GetTick>
 800130e:	1bc0      	subs	r0, r0, r7
 8001310:	4540      	cmp	r0, r8
 8001312:	d9f7      	bls.n	8001304 <HAL_RCC_OscConfig+0x210>
 8001314:	e737      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff f92d 	bl	8000574 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001320:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001322:	0798      	lsls	r0, r3, #30
 8001324:	d406      	bmi.n	8001334 <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001326:	b15e      	cbz	r6, 8001340 <HAL_RCC_OscConfig+0x24c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_RCC_OscConfig+0x288>)
 800132a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800132c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	e005      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001334:	f7ff f91e 	bl	8000574 <HAL_GetTick>
 8001338:	1bc0      	subs	r0, r0, r7
 800133a:	4540      	cmp	r0, r8
 800133c:	d9f0      	bls.n	8001320 <HAL_RCC_OscConfig+0x22c>
 800133e:	e722      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001340:	69a2      	ldr	r2, [r4, #24]
 8001342:	b90a      	cbnz	r2, 8001348 <HAL_RCC_OscConfig+0x254>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001344:	2000      	movs	r0, #0
 8001346:	e04c      	b.n	80013e2 <HAL_RCC_OscConfig+0x2ee>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001348:	4d0c      	ldr	r5, [pc, #48]	; (800137c <HAL_RCC_OscConfig+0x288>)
 800134a:	68ab      	ldr	r3, [r5, #8]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b08      	cmp	r3, #8
 8001352:	f43f aed3 	beq.w	80010fc <HAL_RCC_OscConfig+0x8>
 8001356:	4e0d      	ldr	r6, [pc, #52]	; (800138c <HAL_RCC_OscConfig+0x298>)
 8001358:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135a:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135e:	d134      	bne.n	80013ca <HAL_RCC_OscConfig+0x2d6>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff f908 	bl	8000574 <HAL_GetTick>
 8001364:	4680      	mov	r8, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001366:	682b      	ldr	r3, [r5, #0]
 8001368:	4f04      	ldr	r7, [pc, #16]	; (800137c <HAL_RCC_OscConfig+0x288>)
 800136a:	0199      	lsls	r1, r3, #6
 800136c:	d510      	bpl.n	8001390 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f901 	bl	8000574 <HAL_GetTick>
 8001372:	ebc8 0000 	rsb	r0, r8, r0
 8001376:	2802      	cmp	r0, #2
 8001378:	d9f5      	bls.n	8001366 <HAL_RCC_OscConfig+0x272>
 800137a:	e704      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
 800137c:	40023800 	.word	0x40023800
 8001380:	42470000 	.word	0x42470000
 8001384:	42470e80 	.word	0x42470e80
 8001388:	40007000 	.word	0x40007000
 800138c:	42470060 	.word	0x42470060
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001390:	69e2      	ldr	r2, [r4, #28]
 8001392:	6a23      	ldr	r3, [r4, #32]
 8001394:	4313      	orrs	r3, r2
 8001396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001398:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800139c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800139e:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 80013a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	3b01      	subs	r3, #1
 80013a8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80013ac:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ae:	2301      	movs	r3, #1
 80013b0:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff f8df 	bl	8000574 <HAL_GetTick>
 80013b6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	019a      	lsls	r2, r3, #6
 80013bc:	d4c2      	bmi.n	8001344 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff f8d9 	bl	8000574 <HAL_GetTick>
 80013c2:	1b00      	subs	r0, r0, r4
 80013c4:	2802      	cmp	r0, #2
 80013c6:	d9f7      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2c4>
 80013c8:	e6dd      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff f8d3 	bl	8000574 <HAL_GetTick>
 80013ce:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	019b      	lsls	r3, r3, #6
 80013d4:	d5b6      	bpl.n	8001344 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d6:	f7ff f8cd 	bl	8000574 <HAL_GetTick>
 80013da:	1b00      	subs	r0, r0, r4
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f7      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2dc>
 80013e0:	e6d1      	b.n	8001186 <HAL_RCC_OscConfig+0x92>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80013e2:	b002      	add	sp, #8
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013e8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013e8:	4913      	ldr	r1, [pc, #76]	; (8001438 <HAL_RCC_GetSysClockFreq+0x50>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ea:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ec:	688b      	ldr	r3, [r1, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d01c      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x48>
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fe:	6849      	ldr	r1, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001400:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001404:	bf14      	ite	ne
 8001406:	480d      	ldrne	r0, [pc, #52]	; (800143c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001408:	480d      	ldreq	r0, [pc, #52]	; (8001440 <HAL_RCC_GetSysClockFreq+0x58>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800140a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800140e:	bf18      	it	ne
 8001410:	2300      	movne	r3, #0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001412:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001416:	fba1 0100 	umull	r0, r1, r1, r0
 800141a:	f7fe fed5 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_RCC_GetSysClockFreq+0x50>)
 8001420:	685b      	ldr	r3, [r3, #4]

      sysclockfreq = pllvco/pllp;
 8001422:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001426:	3301      	adds	r3, #1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fbb0 f0f3 	udiv	r0, r0, r3
 800142e:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <HAL_RCC_GetSysClockFreq+0x54>)
 8001432:	bd08      	pop	{r3, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001436:	bd08      	pop	{r3, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	017d7840 	.word	0x017d7840
 8001440:	00f42400 	.word	0x00f42400

08001444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001448:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800144a:	4604      	mov	r4, r0
 800144c:	b910      	cbnz	r0, 8001454 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
 8001450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_ClockConfig+0x120>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	f002 020f 	and.w	r2, r2, #15
 800145c:	428a      	cmp	r2, r1
 800145e:	d317      	bcc.n	8001490 <HAL_RCC_ClockConfig+0x4c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	6822      	ldr	r2, [r4, #0]
 8001462:	0796      	lsls	r6, r2, #30
 8001464:	d51c      	bpl.n	80014a0 <HAL_RCC_ClockConfig+0x5c>
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_RCC_ClockConfig+0x124>)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	f012 0f04 	tst.w	r2, #4
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	bf1e      	ittt	ne
 800146e:	6899      	ldrne	r1, [r3, #8]
 8001470:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001474:	6099      	strne	r1, [r3, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001476:	0710      	lsls	r0, r2, #28
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001478:	bf42      	ittt	mi
 800147a:	6899      	ldrmi	r1, [r3, #8]
 800147c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001480:	6099      	strmi	r1, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001482:	6899      	ldr	r1, [r3, #8]
 8001484:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 8001488:	68a1      	ldr	r1, [r4, #8]
 800148a:	4301      	orrs	r1, r0
 800148c:	6099      	str	r1, [r3, #8]
 800148e:	e007      	b.n	80014a0 <HAL_RCC_ClockConfig+0x5c>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001490:	b2ca      	uxtb	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	4299      	cmp	r1, r3
 800149c:	d1d7      	bne.n	800144e <HAL_RCC_ClockConfig+0xa>
 800149e:	e7df      	b.n	8001460 <HAL_RCC_ClockConfig+0x1c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a0:	07d1      	lsls	r1, r2, #31
 80014a2:	d406      	bmi.n	80014b2 <HAL_RCC_ClockConfig+0x6e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <HAL_RCC_ClockConfig+0x120>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f002 020f 	and.w	r2, r2, #15
 80014ac:	4295      	cmp	r5, r2
 80014ae:	d32c      	bcc.n	800150a <HAL_RCC_ClockConfig+0xc6>
 80014b0:	e032      	b.n	8001518 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	6863      	ldr	r3, [r4, #4]
 80014b4:	4a2c      	ldr	r2, [pc, #176]	; (8001568 <HAL_RCC_ClockConfig+0x124>)
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d103      	bne.n	80014c2 <HAL_RCC_ClockConfig+0x7e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c2:	1e99      	subs	r1, r3, #2
 80014c4:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c8:	d802      	bhi.n	80014d0 <HAL_RCC_ClockConfig+0x8c>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80014ce:	e001      	b.n	80014d4 <HAL_RCC_ClockConfig+0x90>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	f012 0f02 	tst.w	r2, #2
 80014d4:	d0bb      	beq.n	800144e <HAL_RCC_ClockConfig+0xa>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4e24      	ldr	r6, [pc, #144]	; (8001568 <HAL_RCC_ClockConfig+0x124>)
 80014d8:	68b2      	ldr	r2, [r6, #8]
 80014da:	f022 0203 	bic.w	r2, r2, #3
 80014de:	4313      	orrs	r3, r2
 80014e0:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e2:	f7ff f847 	bl	8000574 <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e6:	f241 3888 	movw	r8, #5000	; 0x1388
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ea:	4607      	mov	r7, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ec:	68b3      	ldr	r3, [r6, #8]
 80014ee:	6862      	ldr	r2, [r4, #4]
 80014f0:	f003 030c 	and.w	r3, r3, #12
 80014f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014f8:	d0d4      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x60>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fa:	f7ff f83b 	bl	8000574 <HAL_GetTick>
 80014fe:	1bc0      	subs	r0, r0, r7
 8001500:	4540      	cmp	r0, r8
 8001502:	d9f3      	bls.n	80014ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8001506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	b2ea      	uxtb	r2, r5
 800150c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	429d      	cmp	r5, r3
 8001516:	d19a      	bne.n	800144e <HAL_RCC_ClockConfig+0xa>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	6821      	ldr	r1, [r4, #0]
 800151a:	074a      	lsls	r2, r1, #29
 800151c:	d506      	bpl.n	800152c <HAL_RCC_ClockConfig+0xe8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151e:	4812      	ldr	r0, [pc, #72]	; (8001568 <HAL_RCC_ClockConfig+0x124>)
 8001520:	6883      	ldr	r3, [r0, #8]
 8001522:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001526:	68e3      	ldr	r3, [r4, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	6083      	str	r3, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152c:	070b      	lsls	r3, r1, #28
 800152e:	d507      	bpl.n	8001540 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_RCC_ClockConfig+0x124>)
 8001532:	6921      	ldr	r1, [r4, #16]
 8001534:	6893      	ldr	r3, [r2, #8]
 8001536:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800153a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800153e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001540:	f7ff ff52 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_RCC_ClockConfig+0x124>)
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x128>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800154e:	5cd3      	ldrb	r3, [r2, r3]
 8001550:	40d8      	lsrs	r0, r3
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <HAL_RCC_ClockConfig+0x12c>)
 8001554:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001556:	2000      	movs	r0, #0
 8001558:	f7fe ffc2 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 800155c:	2000      	movs	r0, #0
 800155e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00
 8001568:	40023800 	.word	0x40023800
 800156c:	080021c8 	.word	0x080021c8
 8001570:	20000088 	.word	0x20000088

08001574 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	2302      	movs	r3, #2
 8001576:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800157e:	f002 0207 	and.w	r2, r2, #7
 8001582:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001584:	bf1e      	ittt	ne
 8001586:	681a      	ldrne	r2, [r3, #0]
 8001588:	f042 0201 	orrne.w	r2, r2, #1
 800158c:	601a      	strne	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158e:	2301      	movs	r3, #1
 8001590:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8001594:	2000      	movs	r0, #0
 8001596:	4770      	bx	lr

08001598 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001598:	4a30      	ldr	r2, [pc, #192]	; (800165c <TIM_Base_SetConfig+0xc4>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800159a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800159c:	4290      	cmp	r0, r2
 800159e:	d012      	beq.n	80015c6 <TIM_Base_SetConfig+0x2e>
 80015a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015a4:	d00f      	beq.n	80015c6 <TIM_Base_SetConfig+0x2e>
 80015a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015aa:	4290      	cmp	r0, r2
 80015ac:	d00b      	beq.n	80015c6 <TIM_Base_SetConfig+0x2e>
 80015ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b2:	4290      	cmp	r0, r2
 80015b4:	d007      	beq.n	80015c6 <TIM_Base_SetConfig+0x2e>
 80015b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ba:	4290      	cmp	r0, r2
 80015bc:	d003      	beq.n	80015c6 <TIM_Base_SetConfig+0x2e>
 80015be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015c2:	4290      	cmp	r0, r2
 80015c4:	d119      	bne.n	80015fa <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80015c6:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80015cc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <TIM_Base_SetConfig+0xc4>)
 80015d0:	4290      	cmp	r0, r2
 80015d2:	d029      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 80015d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80015d8:	d026      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 80015da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80015de:	4290      	cmp	r0, r2
 80015e0:	d022      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 80015e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015e6:	4290      	cmp	r0, r2
 80015e8:	d01e      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 80015ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015ee:	4290      	cmp	r0, r2
 80015f0:	d01a      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 80015f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80015f6:	4290      	cmp	r0, r2
 80015f8:	d016      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 80015fa:	4a19      	ldr	r2, [pc, #100]	; (8001660 <TIM_Base_SetConfig+0xc8>)
 80015fc:	4290      	cmp	r0, r2
 80015fe:	d013      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 8001600:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001604:	4290      	cmp	r0, r2
 8001606:	d00f      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 8001608:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800160c:	4290      	cmp	r0, r2
 800160e:	d00b      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 8001610:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001614:	4290      	cmp	r0, r2
 8001616:	d007      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 8001618:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161c:	4290      	cmp	r0, r2
 800161e:	d003      	beq.n	8001628 <TIM_Base_SetConfig+0x90>
 8001620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001624:	4290      	cmp	r0, r2
 8001626:	d103      	bne.n	8001630 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001628:	68ca      	ldr	r2, [r1, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800162a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800162e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001630:	694a      	ldr	r2, [r1, #20]
 8001632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001636:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001638:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800163a:	688b      	ldr	r3, [r1, #8]
 800163c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800163e:	680b      	ldr	r3, [r1, #0]
 8001640:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <TIM_Base_SetConfig+0xc4>)
 8001644:	4298      	cmp	r0, r3
 8001646:	d003      	beq.n	8001650 <TIM_Base_SetConfig+0xb8>
 8001648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800164c:	4298      	cmp	r0, r3
 800164e:	d101      	bne.n	8001654 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001650:	690b      	ldr	r3, [r1, #16]
 8001652:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001654:	2301      	movs	r3, #1
 8001656:	6143      	str	r3, [r0, #20]
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40010000 	.word	0x40010000
 8001660:	40014000 	.word	0x40014000

08001664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001664:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001666:	4604      	mov	r4, r0
 8001668:	b1a0      	cbz	r0, 8001694 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800166a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800166e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001672:	b91b      	cbnz	r3, 800167c <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001674:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001678:	f000 fb60 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800167c:	2302      	movs	r3, #2
 800167e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001682:	6820      	ldr	r0, [r4, #0]
 8001684:	1d21      	adds	r1, r4, #4
 8001686:	f7ff ff87 	bl	8001598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800168a:	2301      	movs	r3, #1
 800168c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8001690:	2000      	movs	r0, #0
 8001692:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8001694:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8001696:	bd10      	pop	{r4, pc}

08001698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001698:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800169a:	6884      	ldr	r4, [r0, #8]
 800169c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80016a0:	4321      	orrs	r1, r4
 80016a2:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016a8:	6083      	str	r3, [r0, #8]
 80016aa:	bd10      	pop	{r4, pc}

080016ac <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016b0:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80016b2:	b570      	push	{r4, r5, r6, lr}
 80016b4:	4604      	mov	r4, r0
 80016b6:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016ba:	f000 808d 	beq.w	80017d8 <HAL_TIM_ConfigClockSource+0x12c>

  htim->State = HAL_TIM_STATE_BUSY;
 80016be:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016c2:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80016c4:	2301      	movs	r3, #1
 80016c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80016d4:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 80016d6:	680b      	ldr	r3, [r1, #0]
 80016d8:	2b40      	cmp	r3, #64	; 0x40
 80016da:	d059      	beq.n	8001790 <HAL_TIM_ConfigClockSource+0xe4>
 80016dc:	d80a      	bhi.n	80016f4 <HAL_TIM_ConfigClockSource+0x48>
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d06d      	beq.n	80017be <HAL_TIM_ConfigClockSource+0x112>
 80016e2:	d802      	bhi.n	80016ea <HAL_TIM_ConfigClockSource+0x3e>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d06a      	beq.n	80017be <HAL_TIM_ConfigClockSource+0x112>
 80016e8:	e070      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x120>
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d067      	beq.n	80017be <HAL_TIM_ConfigClockSource+0x112>
 80016ee:	2b30      	cmp	r3, #48	; 0x30
 80016f0:	d065      	beq.n	80017be <HAL_TIM_ConfigClockSource+0x112>
 80016f2:	e06b      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x120>
 80016f4:	2b60      	cmp	r3, #96	; 0x60
 80016f6:	d033      	beq.n	8001760 <HAL_TIM_ConfigClockSource+0xb4>
 80016f8:	d818      	bhi.n	800172c <HAL_TIM_ConfigClockSource+0x80>
 80016fa:	2b50      	cmp	r3, #80	; 0x50
 80016fc:	d166      	bne.n	80017cc <HAL_TIM_ConfigClockSource+0x120>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016fe:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001700:	684d      	ldr	r5, [r1, #4]
 8001702:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001704:	6a01      	ldr	r1, [r0, #32]
 8001706:	f021 0101 	bic.w	r1, r1, #1
 800170a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800170c:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800170e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001712:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001716:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001718:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800171c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800171e:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001720:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001726:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800172a:	e04e      	b.n	80017ca <HAL_TIM_ConfigClockSource+0x11e>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800172c:	2b70      	cmp	r3, #112	; 0x70
 800172e:	d00c      	beq.n	800174a <HAL_TIM_ConfigClockSource+0x9e>
 8001730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001734:	d14a      	bne.n	80017cc <HAL_TIM_ConfigClockSource+0x120>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001736:	68cb      	ldr	r3, [r1, #12]
 8001738:	684a      	ldr	r2, [r1, #4]
 800173a:	6889      	ldr	r1, [r1, #8]
 800173c:	f7ff ffac 	bl	8001698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001740:	6822      	ldr	r2, [r4, #0]
 8001742:	6893      	ldr	r3, [r2, #8]
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	e008      	b.n	800175c <HAL_TIM_ConfigClockSource+0xb0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800174a:	68cb      	ldr	r3, [r1, #12]
 800174c:	684a      	ldr	r2, [r1, #4]
 800174e:	6889      	ldr	r1, [r1, #8]
 8001750:	f7ff ffa2 	bl	8001698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001754:	6822      	ldr	r2, [r4, #0]
 8001756:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800175c:	6093      	str	r3, [r2, #8]
      break;
 800175e:	e035      	b.n	80017cc <HAL_TIM_ConfigClockSource+0x120>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001760:	684d      	ldr	r5, [r1, #4]
 8001762:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001764:	6a01      	ldr	r1, [r0, #32]
 8001766:	f021 0110 	bic.w	r1, r1, #16
 800176a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800176c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800176e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001770:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001778:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800177c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001780:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001782:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001784:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800178a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800178e:	e01c      	b.n	80017ca <HAL_TIM_ConfigClockSource+0x11e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001790:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001792:	684d      	ldr	r5, [r1, #4]
 8001794:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001796:	6a01      	ldr	r1, [r0, #32]
 8001798:	f021 0101 	bic.w	r1, r1, #1
 800179c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800179e:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017a0:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 80017a8:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017aa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80017ae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80017b0:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80017b2:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80017b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017b8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80017bc:	e005      	b.n	80017ca <HAL_TIM_ConfigClockSource+0x11e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80017be:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017c0:	f043 0307 	orr.w	r3, r3, #7
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80017c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017c8:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017ca:	6083      	str	r3, [r0, #8]
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80017cc:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80017ce:	2000      	movs	r0, #0
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 80017d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017d4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 80017d8:	bd70      	pop	{r4, r5, r6, pc}

080017da <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017e0:	b530      	push	{r4, r5, lr}
 80017e2:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017e6:	d014      	beq.n	8001812 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017ec:	6803      	ldr	r3, [r0, #0]
 80017ee:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017f0:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017f2:	f024 0570 	bic.w	r5, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017f6:	680c      	ldr	r4, [r1, #0]
 80017f8:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80017fa:	f022 0580 	bic.w	r5, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80017fe:	684a      	ldr	r2, [r1, #4]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001800:	605c      	str	r4, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001802:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001804:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001806:	2301      	movs	r3, #1
 8001808:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800180c:	2300      	movs	r3, #0
 800180e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001812:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001814:	bd30      	pop	{r4, r5, pc}
	...

08001818 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 800181a:	2210      	movs	r2, #16
 800181c:	2100      	movs	r1, #0
 800181e:	4668      	mov	r0, sp
 8001820:	f000 fcba 	bl	8002198 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001824:	4815      	ldr	r0, [pc, #84]	; (800187c <MX_ADC1_Init+0x64>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_ADC1_Init+0x68>)
 8001828:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800182c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001830:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001834:	62c2      	str	r2, [r0, #44]	; 0x2c

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001836:	2300      	movs	r3, #0
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001838:	2401      	movs	r4, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800183a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800183e:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001840:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001842:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001844:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001848:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184a:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 800184c:	61c4      	str	r4, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800184e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001852:	6144      	str	r4, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001854:	f7fe fe94 	bl	8000580 <HAL_ADC_Init>
 8001858:	b108      	cbz	r0, 800185e <MX_ADC1_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f9e1 	bl	8001c20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800185e:	2312      	movs	r3, #18
  sConfig.Rank = 1;
 8001860:	e88d 0018 	stmia.w	sp, {r3, r4}
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001864:	4669      	mov	r1, sp
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001866:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_ADC1_Init+0x64>)
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800186a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186c:	f7ff f80a 	bl	8000884 <HAL_ADC_ConfigChannel>
 8001870:	b108      	cbz	r0, 8001876 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8001872:	f000 f9d5 	bl	8001c20 <Error_Handler>
  }

}
 8001876:	b004      	add	sp, #16
 8001878:	bd10      	pop	{r4, pc}
 800187a:	bf00      	nop
 800187c:	200000ac 	.word	0x200000ac
 8001880:	40012000 	.word	0x40012000

08001884 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001884:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if(adcHandle->Instance==ADC1)
 8001886:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <HAL_ADC_MspInit+0x60>)
 8001888:	6802      	ldr	r2, [r0, #0]
 800188a:	429a      	cmp	r2, r3
  }

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800188c:	4605      	mov	r5, r0

  if(adcHandle->Instance==ADC1)
 800188e:	d127      	bne.n	80018e0 <HAL_ADC_MspInit+0x5c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001890:	2300      	movs	r3, #0
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <HAL_ADC_MspInit+0x64>)
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	6c51      	ldr	r1, [r2, #68]	; 0x44
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001898:	4c14      	ldr	r4, [pc, #80]	; (80018ec <HAL_ADC_MspInit+0x68>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800189a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800189e:	6451      	str	r1, [r2, #68]	; 0x44
 80018a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a2:	60a3      	str	r3, [r4, #8]
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80018a8:	9201      	str	r2, [sp, #4]
 80018aa:	9a01      	ldr	r2, [sp, #4]
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_ADC_MspInit+0x6c>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ae:	60e3      	str	r3, [r4, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
  
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018b0:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018be:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c4:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018c6:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018cc:	61e2      	str	r2, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ce:	6223      	str	r3, [r4, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018d0:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018d2:	f7ff f9bf 	bl	8000c54 <HAL_DMA_Init>
 80018d6:	b108      	cbz	r0, 80018dc <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 80018d8:	f000 f9a2 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018dc:	63ac      	str	r4, [r5, #56]	; 0x38
 80018de:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018e0:	b003      	add	sp, #12
 80018e2:	bd30      	pop	{r4, r5, pc}
 80018e4:	40012000 	.word	0x40012000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	200000f4 	.word	0x200000f4
 80018f0:	40026410 	.word	0x40026410

080018f4 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80018f4:	b513      	push	{r0, r1, r4, lr}
  DAC_ChannelConfTypeDef sConfig = {0};

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80018f6:	480c      	ldr	r0, [pc, #48]	; (8001928 <MX_DAC_Init+0x34>)
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_DAC_Init+0x38>)
 80018fa:	6003      	str	r3, [r0, #0]
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
  DAC_ChannelConfTypeDef sConfig = {0};
 80018fc:	2400      	movs	r4, #0
 80018fe:	9400      	str	r4, [sp, #0]
 8001900:	9401      	str	r4, [sp, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001902:	f7ff f8bf 	bl	8000a84 <HAL_DAC_Init>
 8001906:	b108      	cbz	r0, 800190c <MX_DAC_Init+0x18>
  {
    Error_Handler();
 8001908:	f000 f98a 	bl	8001c20 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800190c:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800190e:	2200      	movs	r2, #0
 8001910:	4669      	mov	r1, sp
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_DAC_Init+0x34>)
    Error_Handler();
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001914:	e88d 0018 	stmia.w	sp, {r3, r4}
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001918:	f7ff f948 	bl	8000bac <HAL_DAC_ConfigChannel>
 800191c:	b108      	cbz	r0, 8001922 <MX_DAC_Init+0x2e>
  {
    Error_Handler();
 800191e:	f000 f97f 	bl	8001c20 <Error_Handler>
  }

}
 8001922:	b002      	add	sp, #8
 8001924:	bd10      	pop	{r4, pc}
 8001926:	bf00      	nop
 8001928:	200001b4 	.word	0x200001b4
 800192c:	40007400 	.word	0x40007400

08001930 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001930:	b570      	push	{r4, r5, r6, lr}
 8001932:	4606      	mov	r6, r0
 8001934:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	2214      	movs	r2, #20
 8001938:	2100      	movs	r1, #0
 800193a:	a803      	add	r0, sp, #12
 800193c:	f000 fc2c 	bl	8002198 <memset>
  if(dacHandle->Instance==DAC)
 8001940:	6832      	ldr	r2, [r6, #0]
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_DAC_MspInit+0x98>)
 8001944:	429a      	cmp	r2, r3
 8001946:	d13c      	bne.n	80019c2 <HAL_DAC_MspInit+0x92>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001948:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800194c:	2500      	movs	r5, #0
 800194e:	9501      	str	r5, [sp, #4]
 8001950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	481e      	ldr	r0, [pc, #120]	; (80019cc <HAL_DAC_MspInit+0x9c>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001954:	4c1e      	ldr	r4, [pc, #120]	; (80019d0 <HAL_DAC_MspInit+0xa0>)
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001956:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
 800195c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	9502      	str	r5, [sp, #8]
 8001968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	631a      	str	r2, [r3, #48]	; 0x30
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	9302      	str	r3, [sp, #8]
 8001978:	9b02      	ldr	r3, [sp, #8]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800197a:	2310      	movs	r3, #16
 800197c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001980:	2303      	movs	r3, #3
 8001982:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f7ff fad6 	bl	8000f34 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001988:	4912      	ldr	r1, [pc, #72]	; (80019d4 <HAL_DAC_MspInit+0xa4>)
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	60e5      	str	r5, [r4, #12]

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001992:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	6123      	str	r3, [r4, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800199c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a0:	6163      	str	r3, [r4, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	61a3      	str	r3, [r4, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80019a8:	4620      	mov	r0, r4
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80019aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ae:	61e3      	str	r3, [r4, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80019b0:	6225      	str	r5, [r4, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019b2:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80019b4:	f7ff f94e 	bl	8000c54 <HAL_DMA_Init>
 80019b8:	b108      	cbz	r0, 80019be <HAL_DAC_MspInit+0x8e>
    {
      Error_Handler();
 80019ba:	f000 f931 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80019be:	60b4      	str	r4, [r6, #8]
 80019c0:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80019c2:	b008      	add	sp, #32
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
 80019c6:	bf00      	nop
 80019c8:	40007400 	.word	0x40007400
 80019cc:	40020000 	.word	0x40020000
 80019d0:	20000154 	.word	0x20000154
 80019d4:	40026088 	.word	0x40026088

080019d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80019d8:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_DMA_Init+0x54>)
 80019dc:	2400      	movs	r4, #0
 80019de:	9400      	str	r4, [sp, #0]
 80019e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80019e6:	631a      	str	r2, [r3, #48]	; 0x30
 80019e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019ea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80019ee:	9200      	str	r2, [sp, #0]
 80019f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019f2:	9401      	str	r4, [sp, #4]
 80019f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a02:	4622      	mov	r2, r4
 8001a04:	4621      	mov	r1, r4
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a06:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a08:	2010      	movs	r0, #16
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0a:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a0c:	f7fe ffe2 	bl	80009d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a10:	2010      	movs	r0, #16
 8001a12:	f7ff f813 	bl	8000a3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a16:	4622      	mov	r2, r4
 8001a18:	4621      	mov	r1, r4
 8001a1a:	2038      	movs	r0, #56	; 0x38
 8001a1c:	f7fe ffda 	bl	80009d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a20:	2038      	movs	r0, #56	; 0x38
 8001a22:	f7ff f80b 	bl	8000a3c <HAL_NVIC_EnableIRQ>

}
 8001a26:	b002      	add	sp, #8
 8001a28:	bd10      	pop	{r4, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a30:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_GPIO_Init+0x34>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	9100      	str	r1, [sp, #0]
 8001a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001a46:	9200      	str	r2, [sp, #0]
 8001a48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	9101      	str	r1, [sp, #4]
 8001a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]

}
 8001a5e:	b002      	add	sp, #8
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <ProcessInit>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void ProcessInit(void)
{
 8001a68:	b513      	push	{r0, r1, r4, lr}

	flagProcessReady = 0;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <ProcessInit+0x24>)

	if(arm_fir_init_q15(&S,NUMTAPS,pCoeffs,pState,BLOCK_SIZE) == ARM_MATH_SUCCESS)
 8001a6c:	4c08      	ldr	r4, [pc, #32]	; (8001a90 <ProcessInit+0x28>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <ProcessInit+0x2c>)
/* USER CODE BEGIN PFP */

void ProcessInit(void)
{

	flagProcessReady = 0;
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]

	if(arm_fir_init_q15(&S,NUMTAPS,pCoeffs,pState,BLOCK_SIZE) == ARM_MATH_SUCCESS)
 8001a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <ProcessInit+0x30>)
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	2140      	movs	r1, #64	; 0x40
 8001a80:	f000 fb4e 	bl	8002120 <arm_fir_init_q15>
 8001a84:	b900      	cbnz	r0, 8001a88 <ProcessInit+0x20>
	{

		pState[0] = 0;
 8001a86:	8020      	strh	r0, [r4, #0]

	};

}
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd10      	pop	{r4, pc}
 8001a8c:	20000e54 	.word	0x20000e54
 8001a90:	200009c8 	.word	0x200009c8
 8001a94:	20000e48 	.word	0x20000e48
 8001a98:	20000006 	.word	0x20000006

08001a9c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{

	ptrDataIn = &ADC_Buf[0];
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <HAL_ADC_ConvHalfCpltCallback+0x14>)
 8001a9e:	4a05      	ldr	r2, [pc, #20]	; (8001ab4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001aa0:	601a      	str	r2, [r3, #0]
	ptrDataOut = &DAC_Buf[0];
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8001aa6:	601a      	str	r2, [r3, #0]
	flagProcessReady = 1;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	801a      	strh	r2, [r3, #0]
 8001aae:	4770      	bx	lr
 8001ab0:	20000e5c 	.word	0x20000e5c
 8001ab4:	20000e60 	.word	0x20000e60
 8001ab8:	20000e58 	.word	0x20000e58
 8001abc:	200001c8 	.word	0x200001c8
 8001ac0:	20000e54 	.word	0x20000e54

08001ac4 <HAL_ADC_ConvCpltCallback>:
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{

	ptrDataIn = &ADC_Buf[BLOCK_SIZE];
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_ADC_ConvCpltCallback+0x14>)
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <HAL_ADC_ConvCpltCallback+0x18>)
 8001ac8:	601a      	str	r2, [r3, #0]
	ptrDataOut = &DAC_Buf[BLOCK_SIZE];
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001acc:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_ADC_ConvCpltCallback+0x20>)
 8001ace:	601a      	str	r2, [r3, #0]
	flagProcessReady = 1;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	801a      	strh	r2, [r3, #0]
 8001ad6:	4770      	bx	lr
 8001ad8:	20000e5c 	.word	0x20000e5c
 8001adc:	20001260 	.word	0x20001260
 8001ae0:	20000e58 	.word	0x20000e58
 8001ae4:	200005c8 	.word	0x200005c8
 8001ae8:	20000e54 	.word	0x20000e54

08001aec <ProcessData>:
}

void ProcessData(void)
{

	if(flagProcessReady)
 8001aec:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <ProcessData+0x28>)
 8001aee:	8813      	ldrh	r3, [r2, #0]
 8001af0:	b29b      	uxth	r3, r3
	flagProcessReady = 1;

}

void ProcessData(void)
{
 8001af2:	b510      	push	{r4, lr}

	if(flagProcessReady)
 8001af4:	b163      	cbz	r3, 8001b10 <ProcessData+0x24>
	{

		flagProcessReady = 0;
 8001af6:	2400      	movs	r4, #0
 8001af8:	8014      	strh	r4, [r2, #0]

		arm_fir_q15(&S,ptrDataIn,ptrDataOut,BLOCK_SIZE);
 8001afa:	4907      	ldr	r1, [pc, #28]	; (8001b18 <ProcessData+0x2c>)
 8001afc:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <ProcessData+0x30>)
 8001afe:	6809      	ldr	r1, [r1, #0]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	4807      	ldr	r0, [pc, #28]	; (8001b20 <ProcessData+0x34>)
 8001b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b08:	f000 f958 	bl	8001dbc <arm_fir_q15>

		pState[0] = 0;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <ProcessData+0x38>)
 8001b0e:	801c      	strh	r4, [r3, #0]
 8001b10:	bd10      	pop	{r4, pc}
 8001b12:	bf00      	nop
 8001b14:	20000e54 	.word	0x20000e54
 8001b18:	20000e5c 	.word	0x20000e5c
 8001b1c:	20000e58 	.word	0x20000e58
 8001b20:	20000e48 	.word	0x20000e48
 8001b24:	200009c8 	.word	0x200009c8

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b530      	push	{r4, r5, lr}
 8001b2a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2c:	2230      	movs	r2, #48	; 0x30
 8001b2e:	2100      	movs	r1, #0
 8001b30:	a808      	add	r0, sp, #32
 8001b32:	f000 fb31 	bl	8002198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b36:	2100      	movs	r1, #0
 8001b38:	2214      	movs	r2, #20
 8001b3a:	a803      	add	r0, sp, #12
 8001b3c:	f000 fb2c 	bl	8002198 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	2400      	movs	r4, #0
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <SystemClock_Config+0x90>)
 8001b44:	9401      	str	r4, [sp, #4]
 8001b46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <SystemClock_Config+0x94>)
 8001b5a:	9402      	str	r4, [sp, #8]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b76:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b7e:	2319      	movs	r3, #25
 8001b80:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b82:	f44f 73a8 	mov.w	r3, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b86:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b88:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b92:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f7ff faae 	bl	80010f4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b98:	230f      	movs	r3, #15
 8001b9a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b9c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ba2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ba8:	a803      	add	r0, sp, #12
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001baa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bae:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bb0:	f7ff fc48 	bl	8001444 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001bb4:	b015      	add	sp, #84	; 0x54
 8001bb6:	bd30      	pop	{r4, r5, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN 1 */

	ProcessInit();
 8001bc2:	f7ff ff51 	bl	8001a68 <ProcessInit>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc6:	f7fe fcaf 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bca:	f7ff ffad 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bce:	f7ff ff2f 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bd2:	f7ff ff01 	bl	80019d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001bd6:	f7ff fe1f 	bl	8001818 <MX_ADC1_Init>
  MX_DAC_Init();
 8001bda:	f7ff fe8b 	bl	80018f4 <MX_DAC_Init>
  MX_TIM2_Init();
 8001bde:	f000 f879 	bl	8001cd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001be2:	480a      	ldr	r0, [pc, #40]	; (8001c0c <main+0x4c>)
 8001be4:	f7ff fcc6 	bl	8001574 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t* )ADC_Buf,BUFFER_SIZE);
 8001be8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bec:	4908      	ldr	r1, [pc, #32]	; (8001c10 <main+0x50>)
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <main+0x54>)
 8001bf0:	f7fe fd6c 	bl	80006cc <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t* )DAC_Buf,BUFFER_SIZE,DAC_ALIGN_12B_R);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	9100      	str	r1, [sp, #0]
 8001bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <main+0x58>)
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <main+0x5c>)
 8001c00:	f7fe ff54 	bl	8000aac <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  ProcessData();
 8001c04:	f7ff ff72 	bl	8001aec <ProcessData>
 8001c08:	e7fc      	b.n	8001c04 <main+0x44>
 8001c0a:	bf00      	nop
 8001c0c:	20001660 	.word	0x20001660
 8001c10:	20000e60 	.word	0x20000e60
 8001c14:	200000ac 	.word	0x200000ac
 8001c18:	200001c8 	.word	0x200001c8
 8001c1c:	200001b4 	.word	0x200001b4

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_MspInit+0x34>)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	9100      	str	r1, [sp, #0]
 8001c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
 8001c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	9101      	str	r1, [sp, #4]
 8001c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	b002      	add	sp, #8
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <NMI_Handler>:
 8001c5c:	4770      	bx	lr

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler>

08001c66 <SVC_Handler>:
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f7fe bc76 	b.w	800055c <HAL_IncTick>

08001c70 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <DMA1_Stream5_IRQHandler+0x8>)
 8001c72:	f7ff b8a5 	b.w	8000dc0 <HAL_DMA_IRQHandler>
 8001c76:	bf00      	nop
 8001c78:	20000154 	.word	0x20000154

08001c7c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <DMA2_Stream0_IRQHandler+0x8>)
 8001c7e:	f7ff b89f 	b.w	8000dc0 <HAL_DMA_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	200000f4 	.word	0x200000f4

08001c88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	490f      	ldr	r1, [pc, #60]	; (8001cc8 <SystemInit+0x40>)
 8001c8a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <SystemInit+0x44>)
 8001c98:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c9a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001caa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <SystemInit+0x48>)
 8001cb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cbc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001cc2:	608b      	str	r3, [r1, #8]
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	24003010 	.word	0x24003010

08001cd4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	2100      	movs	r1, #0
 8001cda:	a802      	add	r0, sp, #8
 8001cdc:	f000 fa5c 	bl	8002198 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001ce0:	4815      	ldr	r0, [pc, #84]	; (8001d38 <MX_TIM2_Init+0x64>)

/* TIM2 init function */
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	2300      	movs	r3, #0

  htim2.Instance = TIM2;
 8001ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001ce8:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1680;
 8001cec:	f44f 62d2 	mov.w	r2, #1680	; 0x690

/* TIM2 init function */
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	9301      	str	r3, [sp, #4]

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1680;
 8001cf6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cfc:	f7ff fcb2 	bl	8001664 <HAL_TIM_Base_Init>
 8001d00:	b108      	cbz	r0, 8001d06 <MX_TIM2_Init+0x32>
  {
    Error_Handler();
 8001d02:	f7ff ff8d 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d0a:	a902      	add	r1, sp, #8
 8001d0c:	480a      	ldr	r0, [pc, #40]	; (8001d38 <MX_TIM2_Init+0x64>)
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d10:	f7ff fccc 	bl	80016ac <HAL_TIM_ConfigClockSource>
 8001d14:	b108      	cbz	r0, 8001d1a <MX_TIM2_Init+0x46>
  {
    Error_Handler();
 8001d16:	f7ff ff83 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d1e:	4669      	mov	r1, sp
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_TIM2_Init+0x64>)
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d22:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d26:	f7ff fd58 	bl	80017da <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	b108      	cbz	r0, 8001d30 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d2c:	f7ff ff78 	bl	8001c20 <Error_Handler>
  }

}
 8001d30:	b007      	add	sp, #28
 8001d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d36:	bf00      	nop
 8001d38:	20001660 	.word	0x20001660

08001d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001d3c:	6803      	ldr	r3, [r0, #0]
 8001d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d42:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM2)
 8001d44:	d10b      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_TIM_Base_MspInit+0x28>)
 8001d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d5e:	b002      	add	sp, #8
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001da0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d6e:	e003      	b.n	8001d78 <LoopCopyDataInit>

08001d70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d76:	3104      	adds	r1, #4

08001d78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d78:	480b      	ldr	r0, [pc, #44]	; (8001da8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d80:	d3f6      	bcc.n	8001d70 <CopyDataInit>
  ldr  r2, =_sbss
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d84:	e002      	b.n	8001d8c <LoopFillZerobss>

08001d86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d88:	f842 3b04 	str.w	r3, [r2], #4

08001d8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d90:	d3f9      	bcc.n	8001d86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d92:	f7ff ff79 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d96:	f000 f9d9 	bl	800214c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9a:	f7ff ff11 	bl	8001bc0 <main>
  bx  lr    
 8001d9e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001da4:	080021e8 	.word	0x080021e8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dac:	2000008c 	.word	0x2000008c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001db0:	2000008c 	.word	0x2000008c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001db4:	200016a0 	.word	0x200016a0

08001db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db8:	e7fe      	b.n	8001db8 <ADC_IRQHandler>
	...

08001dbc <arm_fir_q15>:
 8001dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	b099      	sub	sp, #100	; 0x64
 8001dc4:	686c      	ldr	r4, [r5, #4]
 8001dc6:	9016      	str	r0, [sp, #88]	; 0x58
 8001dc8:	8800      	ldrh	r0, [r0, #0]
 8001dca:	9410      	str	r4, [sp, #64]	; 0x40
 8001dcc:	4626      	mov	r6, r4
 8001dce:	f100 4c00 	add.w	ip, r0, #2147483648	; 0x80000000
 8001dd2:	68ac      	ldr	r4, [r5, #8]
 8001dd4:	9317      	str	r3, [sp, #92]	; 0x5c
 8001dd6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001dda:	461f      	mov	r7, r3
 8001ddc:	940c      	str	r4, [sp, #48]	; 0x30
 8001dde:	4623      	mov	r3, r4
 8001de0:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 8001de4:	4625      	mov	r5, r4
 8001de6:	9411      	str	r4, [sp, #68]	; 0x44
 8001de8:	08bc      	lsrs	r4, r7, #2
 8001dea:	9014      	str	r0, [sp, #80]	; 0x50
 8001dec:	9112      	str	r1, [sp, #72]	; 0x48
 8001dee:	9213      	str	r2, [sp, #76]	; 0x4c
 8001df0:	9415      	str	r4, [sp, #84]	; 0x54
 8001df2:	f000 80e8 	beq.w	8001fc6 <arm_fir_q15+0x20a>
 8001df6:	4627      	mov	r7, r4
 8001df8:	4604      	mov	r4, r0
 8001dfa:	0880      	lsrs	r0, r0, #2
 8001dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8001dfe:	00c0      	lsls	r0, r0, #3
 8001e00:	4403      	add	r3, r0
 8001e02:	930e      	str	r3, [sp, #56]	; 0x38
 8001e04:	f004 0303 	and.w	r3, r4, #3
 8001e08:	930d      	str	r3, [sp, #52]	; 0x34
 8001e0a:	f105 0308 	add.w	r3, r5, #8
 8001e0e:	9305      	str	r3, [sp, #20]
 8001e10:	460b      	mov	r3, r1
 8001e12:	3308      	adds	r3, #8
 8001e14:	9306      	str	r3, [sp, #24]
 8001e16:	4613      	mov	r3, r2
 8001e18:	3308      	adds	r3, #8
 8001e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001e1c:	f106 0308 	add.w	r3, r6, #8
 8001e20:	900f      	str	r0, [sp, #60]	; 0x3c
 8001e22:	9307      	str	r3, [sp, #28]
 8001e24:	9708      	str	r7, [sp, #32]
 8001e26:	9a06      	ldr	r2, [sp, #24]
 8001e28:	9c05      	ldr	r4, [sp, #20]
 8001e2a:	f932 3c08 	ldrsh.w	r3, [r2, #-8]
 8001e2e:	f824 3c08 	strh.w	r3, [r4, #-8]
 8001e32:	f932 3c06 	ldrsh.w	r3, [r2, #-6]
 8001e36:	f824 3c06 	strh.w	r3, [r4, #-6]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001e3e:	f931 3c04 	ldrsh.w	r3, [r1, #-4]
 8001e42:	f824 3c04 	strh.w	r3, [r4, #-4]
 8001e46:	9a07      	ldr	r2, [sp, #28]
 8001e48:	f931 3c02 	ldrsh.w	r3, [r1, #-2]
 8001e4c:	f824 3c02 	strh.w	r3, [r4, #-2]
 8001e50:	f852 9c08 	ldr.w	r9, [r2, #-8]
 8001e54:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	4692      	mov	sl, r2
 8001e5c:	2e00      	cmp	r6, #0
 8001e5e:	f000 8135 	beq.w	80020cc <arm_fir_q15+0x310>
 8001e62:	3308      	adds	r3, #8
 8001e64:	469b      	mov	fp, r3
 8001e66:	930a      	str	r3, [sp, #40]	; 0x28
 8001e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e6a:	f8cd b000 	str.w	fp, [sp]
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f103 0a08 	add.w	sl, r3, #8
 8001e74:	fa1f f388 	uxth.w	r3, r8
 8001e78:	4607      	mov	r7, r0
 8001e7a:	9001      	str	r0, [sp, #4]
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	4604      	mov	r4, r0
 8001e80:	4684      	mov	ip, r0
 8001e82:	4686      	mov	lr, r0
 8001e84:	9603      	str	r6, [sp, #12]
 8001e86:	464a      	mov	r2, r9
 8001e88:	9002      	str	r0, [sp, #8]
 8001e8a:	469b      	mov	fp, r3
 8001e8c:	f85a 3c08 	ldr.w	r3, [sl, #-8]
 8001e90:	fbc2 cec3 	smlald	ip, lr, r2, r3
 8001e94:	9e01      	ldr	r6, [sp, #4]
 8001e96:	fbc8 76c3 	smlald	r7, r6, r8, r3
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	0c12      	lsrs	r2, r2, #16
 8001e9e:	9c00      	ldr	r4, [sp, #0]
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	ea4b 0902 	orr.w	r9, fp, r2
 8001ea6:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8001eaa:	fbc9 51d3 	smlaldx	r5, r1, r9, r3
 8001eae:	ea4f 4918 	mov.w	r9, r8, lsr #16
 8001eb2:	fa1f fb82 	uxth.w	fp, r2
 8001eb6:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8001eba:	9104      	str	r1, [sp, #16]
 8001ebc:	ea4b 0909 	orr.w	r9, fp, r9
 8001ec0:	9902      	ldr	r1, [sp, #8]
 8001ec2:	fbc9 01d3 	smlaldx	r0, r1, r9, r3
 8001ec6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 8001eca:	fbc8 cec3 	smlald	ip, lr, r8, r3
 8001ece:	f854 8c04 	ldr.w	r8, [r4, #-4]
 8001ed2:	fbc2 76c3 	smlald	r7, r6, r2, r3
 8001ed6:	9601      	str	r6, [sp, #4]
 8001ed8:	9c04      	ldr	r4, [sp, #16]
 8001eda:	fbc9 54d3 	smlaldx	r5, r4, r9, r3
 8001ede:	0c16      	lsrs	r6, r2, #16
 8001ee0:	fa1f fb88 	uxth.w	fp, r8
 8001ee4:	0436      	lsls	r6, r6, #16
 8001ee6:	ea4b 0606 	orr.w	r6, fp, r6
 8001eea:	fbc6 01d3 	smlaldx	r0, r1, r6, r3
 8001eee:	9b00      	ldr	r3, [sp, #0]
 8001ef0:	9102      	str	r1, [sp, #8]
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	9b03      	ldr	r3, [sp, #12]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	f10a 0a08 	add.w	sl, sl, #8
 8001efe:	9303      	str	r3, [sp, #12]
 8001f00:	d1c4      	bne.n	8001e8c <arm_fir_q15+0xd0>
 8001f02:	4691      	mov	r9, r2
 8001f04:	9b07      	ldr	r3, [sp, #28]
 8001f06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001f08:	4413      	add	r3, r2
 8001f0a:	469a      	mov	sl, r3
 8001f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001f10:	b1ca      	cbz	r2, 8001f46 <arm_fir_q15+0x18a>
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	fbc9 cec3 	smlald	ip, lr, r9, r3
 8001f18:	9e01      	ldr	r6, [sp, #4]
 8001f1a:	fbc8 76c3 	smlald	r7, r6, r8, r3
 8001f1e:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8001f22:	fa1f f288 	uxth.w	r2, r8
 8001f26:	ea4f 4909 	mov.w	r9, r9, lsl #16
 8001f2a:	9601      	str	r6, [sp, #4]
 8001f2c:	ea42 0909 	orr.w	r9, r2, r9
 8001f30:	f8da 6000 	ldr.w	r6, [sl]
 8001f34:	fbc9 54d3 	smlaldx	r5, r4, r9, r3
 8001f38:	ea4f 4218 	mov.w	r2, r8, lsr #16
 8001f3c:	0412      	lsls	r2, r2, #16
 8001f3e:	b2b6      	uxth	r6, r6
 8001f40:	4316      	orrs	r6, r2
 8001f42:	fbc6 01d3 	smlaldx	r0, r1, r6, r3
 8001f46:	9b01      	ldr	r3, [sp, #4]
 8001f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f4a:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 8001f4e:	0bff      	lsrs	r7, r7, #15
 8001f50:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
 8001f54:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 8001f58:	f307 070f 	ssat	r7, #16, r7
 8001f5c:	f30c 0c0f 	ssat	ip, #16, ip
 8001f60:	b2bf      	uxth	r7, r7
 8001f62:	fa1f fc8c 	uxth.w	ip, ip
 8001f66:	0bed      	lsrs	r5, r5, #15
 8001f68:	0bc0      	lsrs	r0, r0, #15
 8001f6a:	ea45 4544 	orr.w	r5, r5, r4, lsl #17
 8001f6e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
 8001f72:	f305 050f 	ssat	r5, #16, r5
 8001f76:	f300 000f 	ssat	r0, #16, r0
 8001f7a:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8001f7e:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8001f82:	4613      	mov	r3, r2
 8001f84:	f842 5c08 	str.w	r5, [r2, #-8]
 8001f88:	f842 7c04 	str.w	r7, [r2, #-4]
 8001f8c:	9a05      	ldr	r2, [sp, #20]
 8001f8e:	3308      	adds	r3, #8
 8001f90:	3208      	adds	r2, #8
 8001f92:	9309      	str	r3, [sp, #36]	; 0x24
 8001f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f96:	9205      	str	r2, [sp, #20]
 8001f98:	9307      	str	r3, [sp, #28]
 8001f9a:	9a06      	ldr	r2, [sp, #24]
 8001f9c:	9b08      	ldr	r3, [sp, #32]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	9206      	str	r2, [sp, #24]
 8001fa4:	9308      	str	r3, [sp, #32]
 8001fa6:	f47f af3e 	bne.w	8001e26 <arm_fir_q15+0x6a>
 8001faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001fac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	441a      	add	r2, r3
 8001fb2:	9211      	str	r2, [sp, #68]	; 0x44
 8001fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001fb6:	441a      	add	r2, r3
 8001fb8:	9212      	str	r2, [sp, #72]	; 0x48
 8001fba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001fbc:	441a      	add	r2, r3
 8001fbe:	9213      	str	r2, [sp, #76]	; 0x4c
 8001fc0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001fc2:	441a      	add	r2, r3
 8001fc4:	9210      	str	r2, [sp, #64]	; 0x40
 8001fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001fc8:	f013 0303 	ands.w	r3, r3, #3
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	d03f      	beq.n	8002050 <arm_fir_q15+0x294>
 8001fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001fd2:	f1a2 0c02 	sub.w	ip, r2, #2
 8001fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001fd8:	f102 0904 	add.w	r9, r2, #4
 8001fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001fde:	f8cd 9004 	str.w	r9, [sp, #4]
 8001fe2:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8001fe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001fe8:	f8cd 8000 	str.w	r8, [sp]
 8001fec:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8001ff0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001ff4:	f102 0e04 	add.w	lr, r2, #4
 8001ff8:	461f      	mov	r7, r3
 8001ffa:	f938 3b02 	ldrsh.w	r3, [r8], #2
 8001ffe:	9a01      	ldr	r2, [sp, #4]
 8002000:	9900      	ldr	r1, [sp, #0]
 8002002:	f82c 3f02 	strh.w	r3, [ip, #2]!
 8002006:	2400      	movs	r4, #0
 8002008:	4673      	mov	r3, lr
 800200a:	2500      	movs	r5, #0
 800200c:	f933 bc04 	ldrsh.w	fp, [r3, #-4]
 8002010:	f932 ac04 	ldrsh.w	sl, [r2, #-4]
 8002014:	f933 6c02 	ldrsh.w	r6, [r3, #-2]
 8002018:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 800201c:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 8002020:	3901      	subs	r1, #1
 8002022:	f103 0304 	add.w	r3, r3, #4
 8002026:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 800202a:	f102 0204 	add.w	r2, r2, #4
 800202e:	d1ed      	bne.n	800200c <arm_fir_q15+0x250>
 8002030:	0be3      	lsrs	r3, r4, #15
 8002032:	3f01      	subs	r7, #1
 8002034:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 8002038:	f10e 0e02 	add.w	lr, lr, #2
 800203c:	f303 030f 	ssat	r3, #16, r3
 8002040:	f829 3b02 	strh.w	r3, [r9], #2
 8002044:	d1d9      	bne.n	8001ffa <arm_fir_q15+0x23e>
 8002046:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002048:	9a02      	ldr	r2, [sp, #8]
 800204a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800204e:	9310      	str	r3, [sp, #64]	; 0x40
 8002050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002052:	1e5f      	subs	r7, r3, #1
 8002054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002056:	08bd      	lsrs	r5, r7, #2
 8002058:	685e      	ldr	r6, [r3, #4]
 800205a:	d029      	beq.n	80020b0 <arm_fir_q15+0x2f4>
 800205c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800205e:	4602      	mov	r2, r0
 8002060:	f106 0310 	add.w	r3, r6, #16
 8002064:	3210      	adds	r2, #16
 8002066:	4296      	cmp	r6, r2
 8002068:	bf38      	it	cc
 800206a:	4298      	cmpcc	r0, r3
 800206c:	bf2c      	ite	cs
 800206e:	2301      	movcs	r3, #1
 8002070:	2300      	movcc	r3, #0
 8002072:	2d02      	cmp	r5, #2
 8002074:	bf94      	ite	ls
 8002076:	2300      	movls	r3, #0
 8002078:	f003 0301 	andhi.w	r3, r3, #1
 800207c:	b39b      	cbz	r3, 80020e6 <arm_fir_q15+0x32a>
 800207e:	4603      	mov	r3, r0
 8002080:	4333      	orrs	r3, r6
 8002082:	079b      	lsls	r3, r3, #30
 8002084:	d12f      	bne.n	80020e6 <arm_fir_q15+0x32a>
 8002086:	f100 0208 	add.w	r2, r0, #8
 800208a:	f106 0308 	add.w	r3, r6, #8
 800208e:	2100      	movs	r1, #0
 8002090:	e912 0011 	ldmdb	r2, {r0, r4}
 8002094:	3101      	adds	r1, #1
 8002096:	428d      	cmp	r5, r1
 8002098:	e903 0011 	stmdb	r3, {r0, r4}
 800209c:	f102 0208 	add.w	r2, r2, #8
 80020a0:	f103 0308 	add.w	r3, r3, #8
 80020a4:	d1f4      	bne.n	8002090 <arm_fir_q15+0x2d4>
 80020a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020a8:	00ed      	lsls	r5, r5, #3
 80020aa:	442b      	add	r3, r5
 80020ac:	442e      	add	r6, r5
 80020ae:	9310      	str	r3, [sp, #64]	; 0x40
 80020b0:	f017 0303 	ands.w	r3, r7, #3
 80020b4:	d007      	beq.n	80020c6 <arm_fir_q15+0x30a>
 80020b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80020b8:	3e02      	subs	r6, #2
 80020ba:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80020be:	f826 1f02 	strh.w	r1, [r6, #2]!
 80020c2:	3b01      	subs	r3, #1
 80020c4:	d1f9      	bne.n	80020ba <arm_fir_q15+0x2fe>
 80020c6:	b019      	add	sp, #100	; 0x64
 80020c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020cc:	f10a 0208 	add.w	r2, sl, #8
 80020d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020d2:	9601      	str	r6, [sp, #4]
 80020d4:	4630      	mov	r0, r6
 80020d6:	4631      	mov	r1, r6
 80020d8:	4637      	mov	r7, r6
 80020da:	4635      	mov	r5, r6
 80020dc:	46b6      	mov	lr, r6
 80020de:	4634      	mov	r4, r6
 80020e0:	46b4      	mov	ip, r6
 80020e2:	920a      	str	r2, [sp, #40]	; 0x28
 80020e4:	e713      	b.n	8001f0e <arm_fir_q15+0x152>
 80020e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80020e8:	f106 0208 	add.w	r2, r6, #8
 80020ec:	3308      	adds	r3, #8
 80020ee:	4629      	mov	r1, r5
 80020f0:	f933 0c08 	ldrsh.w	r0, [r3, #-8]
 80020f4:	f822 0c08 	strh.w	r0, [r2, #-8]
 80020f8:	f933 0c06 	ldrsh.w	r0, [r3, #-6]
 80020fc:	f822 0c06 	strh.w	r0, [r2, #-6]
 8002100:	f933 0c04 	ldrsh.w	r0, [r3, #-4]
 8002104:	f822 0c04 	strh.w	r0, [r2, #-4]
 8002108:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
 800210c:	f822 0c02 	strh.w	r0, [r2, #-2]
 8002110:	3901      	subs	r1, #1
 8002112:	f103 0308 	add.w	r3, r3, #8
 8002116:	f102 0208 	add.w	r2, r2, #8
 800211a:	d1e9      	bne.n	80020f0 <arm_fir_q15+0x334>
 800211c:	e7c3      	b.n	80020a6 <arm_fir_q15+0x2ea>
 800211e:	bf00      	nop

08002120 <arm_fir_init_q15>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	f011 0501 	ands.w	r5, r1, #1
 8002126:	d10e      	bne.n	8002146 <arm_fir_init_q15+0x26>
 8002128:	461e      	mov	r6, r3
 800212a:	4613      	mov	r3, r2
 800212c:	9a04      	ldr	r2, [sp, #16]
 800212e:	8001      	strh	r1, [r0, #0]
 8002130:	4604      	mov	r4, r0
 8002132:	188a      	adds	r2, r1, r2
 8002134:	6083      	str	r3, [r0, #8]
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	4629      	mov	r1, r5
 800213a:	4630      	mov	r0, r6
 800213c:	f000 f82c 	bl	8002198 <memset>
 8002140:	6066      	str	r6, [r4, #4]
 8002142:	4628      	mov	r0, r5
 8002144:	bd70      	pop	{r4, r5, r6, pc}
 8002146:	f04f 30ff 	mov.w	r0, #4294967295
 800214a:	bd70      	pop	{r4, r5, r6, pc}

0800214c <__libc_init_array>:
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <__libc_init_array+0x3c>)
 8002150:	4c0e      	ldr	r4, [pc, #56]	; (800218c <__libc_init_array+0x40>)
 8002152:	1ae4      	subs	r4, r4, r3
 8002154:	10a4      	asrs	r4, r4, #2
 8002156:	2500      	movs	r5, #0
 8002158:	461e      	mov	r6, r3
 800215a:	42a5      	cmp	r5, r4
 800215c:	d004      	beq.n	8002168 <__libc_init_array+0x1c>
 800215e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002162:	4798      	blx	r3
 8002164:	3501      	adds	r5, #1
 8002166:	e7f8      	b.n	800215a <__libc_init_array+0xe>
 8002168:	f000 f81e 	bl	80021a8 <_init>
 800216c:	4c08      	ldr	r4, [pc, #32]	; (8002190 <__libc_init_array+0x44>)
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <__libc_init_array+0x48>)
 8002170:	1ae4      	subs	r4, r4, r3
 8002172:	10a4      	asrs	r4, r4, #2
 8002174:	2500      	movs	r5, #0
 8002176:	461e      	mov	r6, r3
 8002178:	42a5      	cmp	r5, r4
 800217a:	d004      	beq.n	8002186 <__libc_init_array+0x3a>
 800217c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002180:	4798      	blx	r3
 8002182:	3501      	adds	r5, #1
 8002184:	e7f8      	b.n	8002178 <__libc_init_array+0x2c>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	080021e0 	.word	0x080021e0
 800218c:	080021e0 	.word	0x080021e0
 8002190:	080021e4 	.word	0x080021e4
 8002194:	080021e0 	.word	0x080021e0

08002198 <memset>:
 8002198:	4402      	add	r2, r0
 800219a:	4603      	mov	r3, r0
 800219c:	4293      	cmp	r3, r2
 800219e:	d002      	beq.n	80021a6 <memset+0xe>
 80021a0:	f803 1b01 	strb.w	r1, [r3], #1
 80021a4:	e7fa      	b.n	800219c <memset+0x4>
 80021a6:	4770      	bx	lr

080021a8 <_init>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr

080021b4 <_fini>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	bf00      	nop
 80021b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ba:	bc08      	pop	{r3}
 80021bc:	469e      	mov	lr, r3
 80021be:	4770      	bx	lr
