
Proy_Led_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000126c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080013f4  080013f4  000113f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800140c  0800140c  0001140c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000060  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000006c  2000006c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009341  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001830  00000000  00000000  0002937d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004827  00000000  00000000  0002abad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  0002f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002fb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000350e  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000029ef  00000000  00000000  00033866  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  00036255  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001478  00000000  00000000  000362d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013dc 	.word	0x080013dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080013dc 	.word	0x080013dc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97e 	b.w	80004dc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460e      	mov	r6, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9d08      	ldr	r5, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d150      	bne.n	80002aa <__udivmoddi4+0xb2>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96c      	bls.n	80002e8 <__udivmoddi4+0xf0>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0420 	rsb	r4, lr, #32
 800021c:	fa20 f404 	lsr.w	r4, r0, r4
 8000220:	fa01 f60e 	lsl.w	r6, r1, lr
 8000224:	ea44 0c06 	orr.w	ip, r4, r6
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000234:	0c22      	lsrs	r2, r4, #16
 8000236:	fbbc f0f9 	udiv	r0, ip, r9
 800023a:	fa1f f887 	uxth.w	r8, r7
 800023e:	fb09 c610 	mls	r6, r9, r0, ip
 8000242:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000246:	fb00 f308 	mul.w	r3, r0, r8
 800024a:	42b3      	cmp	r3, r6
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x6a>
 800024e:	19f6      	adds	r6, r6, r7
 8000250:	f100 32ff 	add.w	r2, r0, #4294967295
 8000254:	f080 8122 	bcs.w	800049c <__udivmoddi4+0x2a4>
 8000258:	42b3      	cmp	r3, r6
 800025a:	f240 811f 	bls.w	800049c <__udivmoddi4+0x2a4>
 800025e:	3802      	subs	r0, #2
 8000260:	443e      	add	r6, r7
 8000262:	1af6      	subs	r6, r6, r3
 8000264:	b2a2      	uxth	r2, r4
 8000266:	fbb6 f3f9 	udiv	r3, r6, r9
 800026a:	fb09 6613 	mls	r6, r9, r3, r6
 800026e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000272:	fb03 f808 	mul.w	r8, r3, r8
 8000276:	45a0      	cmp	r8, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x96>
 800027a:	19e4      	adds	r4, r4, r7
 800027c:	f103 32ff 	add.w	r2, r3, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x2a0>
 8000284:	45a0      	cmp	r8, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x2a0>
 800028a:	3b02      	subs	r3, #2
 800028c:	443c      	add	r4, r7
 800028e:	ebc8 0404 	rsb	r4, r8, r4
 8000292:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	2d00      	cmp	r5, #0
 800029a:	d062      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029c:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a0:	2300      	movs	r3, #0
 80002a2:	602c      	str	r4, [r5, #0]
 80002a4:	606b      	str	r3, [r5, #4]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d907      	bls.n	80002be <__udivmoddi4+0xc6>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	d055      	beq.n	800035e <__udivmoddi4+0x166>
 80002b2:	2100      	movs	r1, #0
 80002b4:	e885 0041 	stmia.w	r5, {r0, r6}
 80002b8:	4608      	mov	r0, r1
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	f040 8090 	bne.w	80003e8 <__udivmoddi4+0x1f0>
 80002c8:	42b3      	cmp	r3, r6
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xda>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb66 0603 	sbc.w	r6, r6, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	46b4      	mov	ip, r6
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d040      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e0:	e885 1010 	stmia.w	r5, {r4, ip}
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	b912      	cbnz	r2, 80002f0 <__udivmoddi4+0xf8>
 80002ea:	2701      	movs	r7, #1
 80002ec:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f0:	fab7 fe87 	clz	lr, r7
 80002f4:	f1be 0f00 	cmp.w	lr, #0
 80002f8:	d135      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fa:	1bf3      	subs	r3, r6, r7
 80002fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f0f8 	udiv	r0, r3, r8
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb08 3610 	mls	r6, r8, r0, r3
 8000310:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000314:	fb0c f300 	mul.w	r3, ip, r0
 8000318:	42b3      	cmp	r3, r6
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19f6      	adds	r6, r6, r7
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42b3      	cmp	r3, r6
 8000326:	f200 80ce 	bhi.w	80004c6 <__udivmoddi4+0x2ce>
 800032a:	4610      	mov	r0, r2
 800032c:	1af6      	subs	r6, r6, r3
 800032e:	b2a2      	uxth	r2, r4
 8000330:	fbb6 f3f8 	udiv	r3, r6, r8
 8000334:	fb08 6613 	mls	r6, r8, r3, r6
 8000338:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 800033c:	fb0c fc03 	mul.w	ip, ip, r3
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f103 32ff 	add.w	r2, r3, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b5 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 8000352:	4613      	mov	r3, r2
 8000354:	ebcc 0404 	rsb	r4, ip, r4
 8000358:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800035c:	e79c      	b.n	8000298 <__udivmoddi4+0xa0>
 800035e:	4629      	mov	r1, r5
 8000360:	4628      	mov	r0, r5
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0120 	rsb	r1, lr, #32
 800036a:	fa06 f30e 	lsl.w	r3, r6, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f901 	lsr.w	r9, r0, r1
 8000376:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037a:	40ce      	lsrs	r6, r1
 800037c:	ea49 0903 	orr.w	r9, r9, r3
 8000380:	fbb6 faf8 	udiv	sl, r6, r8
 8000384:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000388:	fb08 661a 	mls	r6, r8, sl, r6
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000394:	fb0a f20c 	mul.w	r2, sl, ip
 8000398:	429a      	cmp	r2, r3
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1be>
 80003a0:	19db      	adds	r3, r3, r7
 80003a2:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003a6:	f080 8087 	bcs.w	80004b8 <__udivmoddi4+0x2c0>
 80003aa:	429a      	cmp	r2, r3
 80003ac:	f240 8084 	bls.w	80004b8 <__udivmoddi4+0x2c0>
 80003b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80003b4:	443b      	add	r3, r7
 80003b6:	1a9b      	subs	r3, r3, r2
 80003b8:	fa1f f989 	uxth.w	r9, r9
 80003bc:	fbb3 f1f8 	udiv	r1, r3, r8
 80003c0:	fb08 3311 	mls	r3, r8, r1, r3
 80003c4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003c8:	fb01 f60c 	mul.w	r6, r1, ip
 80003cc:	429e      	cmp	r6, r3
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1e8>
 80003d0:	19db      	adds	r3, r3, r7
 80003d2:	f101 32ff 	add.w	r2, r1, #4294967295
 80003d6:	d26b      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 80003d8:	429e      	cmp	r6, r3
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 80003dc:	3902      	subs	r1, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1b9b      	subs	r3, r3, r6
 80003e2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80003e6:	e78e      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e8:	f1c1 0e20 	rsb	lr, r1, #32
 80003ec:	fa22 f40e 	lsr.w	r4, r2, lr
 80003f0:	408b      	lsls	r3, r1
 80003f2:	4323      	orrs	r3, r4
 80003f4:	fa20 f70e 	lsr.w	r7, r0, lr
 80003f8:	fa06 f401 	lsl.w	r4, r6, r1
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	fa26 f60e 	lsr.w	r6, r6, lr
 8000404:	433c      	orrs	r4, r7
 8000406:	fbb6 f9fc 	udiv	r9, r6, ip
 800040a:	0c27      	lsrs	r7, r4, #16
 800040c:	fb0c 6619 	mls	r6, ip, r9, r6
 8000410:	fa1f f883 	uxth.w	r8, r3
 8000414:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000418:	fb09 f708 	mul.w	r7, r9, r8
 800041c:	42b7      	cmp	r7, r6
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	fa00 fa01 	lsl.w	sl, r0, r1
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x242>
 8000428:	18f6      	adds	r6, r6, r3
 800042a:	f109 30ff 	add.w	r0, r9, #4294967295
 800042e:	d241      	bcs.n	80004b4 <__udivmoddi4+0x2bc>
 8000430:	42b7      	cmp	r7, r6
 8000432:	d93f      	bls.n	80004b4 <__udivmoddi4+0x2bc>
 8000434:	f1a9 0902 	sub.w	r9, r9, #2
 8000438:	441e      	add	r6, r3
 800043a:	1bf6      	subs	r6, r6, r7
 800043c:	b2a0      	uxth	r0, r4
 800043e:	fbb6 f4fc 	udiv	r4, r6, ip
 8000442:	fb0c 6614 	mls	r6, ip, r4, r6
 8000446:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800044a:	fb04 f808 	mul.w	r8, r4, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x26a>
 8000452:	18ff      	adds	r7, r7, r3
 8000454:	f104 30ff 	add.w	r0, r4, #4294967295
 8000458:	d228      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d926      	bls.n	80004ac <__udivmoddi4+0x2b4>
 800045e:	3c02      	subs	r4, #2
 8000460:	441f      	add	r7, r3
 8000462:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000466:	ebc8 0707 	rsb	r7, r8, r7
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	4644      	mov	r4, r8
 8000472:	464e      	mov	r6, r9
 8000474:	d314      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	d029      	beq.n	80004cc <__udivmoddi4+0x2d4>
 8000478:	b365      	cbz	r5, 80004d4 <__udivmoddi4+0x2dc>
 800047a:	ebba 0304 	subs.w	r3, sl, r4
 800047e:	eb67 0706 	sbc.w	r7, r7, r6
 8000482:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000486:	40cb      	lsrs	r3, r1
 8000488:	40cf      	lsrs	r7, r1
 800048a:	ea4e 0303 	orr.w	r3, lr, r3
 800048e:	e885 0088 	stmia.w	r5, {r3, r7}
 8000492:	2100      	movs	r1, #0
 8000494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000498:	4613      	mov	r3, r2
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x96>
 800049c:	4610      	mov	r0, r2
 800049e:	e6e0      	b.n	8000262 <__udivmoddi4+0x6a>
 80004a0:	ebb8 0402 	subs.w	r4, r8, r2
 80004a4:	eb69 0603 	sbc.w	r6, r9, r3
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7e5      	b.n	8000478 <__udivmoddi4+0x280>
 80004ac:	4604      	mov	r4, r0
 80004ae:	e7d8      	b.n	8000462 <__udivmoddi4+0x26a>
 80004b0:	4611      	mov	r1, r2
 80004b2:	e795      	b.n	80003e0 <__udivmoddi4+0x1e8>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7c0      	b.n	800043a <__udivmoddi4+0x242>
 80004b8:	468a      	mov	sl, r1
 80004ba:	e77c      	b.n	80003b6 <__udivmoddi4+0x1be>
 80004bc:	3b02      	subs	r3, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e748      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xe4>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443e      	add	r6, r7
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x134>
 80004cc:	45c2      	cmp	sl, r8
 80004ce:	d3e7      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80004d0:	463e      	mov	r6, r7
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x280>
 80004d4:	4629      	mov	r1, r5
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e2:	4a0e      	ldr	r2, [pc, #56]	; (800051c <HAL_InitTick+0x3c>)
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_InitTick+0x40>)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e6:	4605      	mov	r5, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	7818      	ldrb	r0, [r3, #0]
 80004ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ee:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f2:	6810      	ldr	r0, [r2, #0]
 80004f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f8:	f000 f896 	bl	8000628 <HAL_SYSTICK_Config>
 80004fc:	4604      	mov	r4, r0
 80004fe:	b958      	cbnz	r0, 8000518 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000500:	2d0f      	cmp	r5, #15
 8000502:	d809      	bhi.n	8000518 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000504:	4602      	mov	r2, r0
 8000506:	4629      	mov	r1, r5
 8000508:	f04f 30ff 	mov.w	r0, #4294967295
 800050c:	f000 f84a 	bl	80005a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <HAL_InitTick+0x44>)
 8000512:	4620      	mov	r0, r4
 8000514:	601d      	str	r5, [r3, #0]
 8000516:	bd38      	pop	{r3, r4, r5, pc}
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
  {
    return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051a:	bd38      	pop	{r3, r4, r5, pc}
 800051c:	20000008 	.word	0x20000008
 8000520:	20000004 	.word	0x20000004
 8000524:	20000000 	.word	0x20000000

08000528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000528:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f81b 	bl	8000580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ffc8 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000550:	f000 fe48 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	4904      	ldr	r1, [pc, #16]	; (8000570 <HAL_IncTick+0x14>)
 8000560:	6813      	ldr	r3, [r2, #0]
 8000562:	7809      	ldrb	r1, [r1, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028
 8000570:	20000004 	.word	0x20000004

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000028 	.word	0x20000028

08000580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000582:	68d3      	ldr	r3, [r2, #12]
 8000584:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000590:	0200      	lsls	r0, r0, #8
 8000592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000596:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800059a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_NVIC_SetPriority+0x60>)
 80005a6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ac:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ae:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b4:	2c04      	cmp	r4, #4
 80005b6:	bf28      	it	cs
 80005b8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	2d06      	cmp	r5, #6

  return (
 80005bc:	f04f 0501 	mov.w	r5, #1
 80005c0:	fa05 f404 	lsl.w	r4, r5, r4
 80005c4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c8:	bf8c      	ite	hi
 80005ca:	3b03      	subhi	r3, #3
 80005cc:	2300      	movls	r3, #0

  return (
 80005ce:	400c      	ands	r4, r1
 80005d0:	409c      	lsls	r4, r3
 80005d2:	fa05 f303 	lsl.w	r3, r5, r3
 80005d6:	3b01      	subs	r3, #1
 80005d8:	401a      	ands	r2, r3
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80005da:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80005dc:	ea42 0204 	orr.w	r2, r2, r4
 80005e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfad      	iteet	ge
 80005e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000608 <HAL_NVIC_SetPriority+0x64>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	bfb5      	itete	lt
 80005f6:	b2d2      	uxtblt	r2, r2
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	b2d2      	uxtbge	r2, r2
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	541a      	strblt	r2, [r3, r0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	e000ed14 	.word	0xe000ed14

0800060c <HAL_NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800060c:	2800      	cmp	r0, #0
 800060e:	db08      	blt.n	8000622 <HAL_NVIC_EnableIRQ+0x16>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000610:	0942      	lsrs	r2, r0, #5
 8000612:	2301      	movs	r3, #1
 8000614:	f000 001f 	and.w	r0, r0, #31
 8000618:	fa03 f000 	lsl.w	r0, r3, r0
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <HAL_NVIC_EnableIRQ+0x18>)
 800061e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000622:	4770      	bx	lr
 8000624:	e000e100 	.word	0xe000e100

08000628 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000628:	3801      	subs	r0, #1
 800062a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062e:	d20a      	bcs.n	8000646 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_SYSTICK_Config+0x24>)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000632:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000634:	6058      	str	r0, [r3, #4]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	21f0      	movs	r1, #240	; 0xf0
 8000638:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800063c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000640:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000646:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e010 	.word	0xe000e010
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000658:	4f6a      	ldr	r7, [pc, #424]	; (8000804 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800065a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800080c <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000660:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000810 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000664:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000666:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800066c:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800066e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000670:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000672:	ea34 0303 	bics.w	r3, r4, r3
 8000676:	f040 80bd 	bne.w	80007f4 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800067a:	684d      	ldr	r5, [r1, #4]
 800067c:	f025 0a10 	bic.w	sl, r5, #16
 8000680:	f1ba 0f02 	cmp.w	sl, #2
 8000684:	d114      	bne.n	80006b0 <HAL_GPIO_Init+0x5c>
 8000686:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 800068a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800068e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000692:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000696:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800069a:	230f      	movs	r3, #15
 800069c:	fa03 f30b 	lsl.w	r3, r3, fp
 80006a0:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006a4:	690b      	ldr	r3, [r1, #16]
 80006a6:	fa03 f30b 	lsl.w	r3, r3, fp
 80006aa:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80006ac:	f8c9 3020 	str.w	r3, [r9, #32]
 80006b0:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006b4:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006b8:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006ba:	fa09 f90b 	lsl.w	r9, r9, fp
 80006be:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c2:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006c6:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ca:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ce:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006d2:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006d4:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80006d8:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006da:	d80f      	bhi.n	80006fc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80006dc:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006de:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006e0:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006e4:	fa06 f60b 	lsl.w	r6, r6, fp
 80006e8:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 80006ea:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006ec:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ee:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006f2:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006f6:	4096      	lsls	r6, r2
 80006f8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80006fa:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006fc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006fe:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	688b      	ldr	r3, [r1, #8]
 8000704:	fa03 f30b 	lsl.w	r3, r3, fp
 8000708:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800070c:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800070e:	00eb      	lsls	r3, r5, #3
 8000710:	d570      	bpl.n	80007f4 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	9303      	str	r3, [sp, #12]
 8000716:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000720:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000724:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000728:	f022 0903 	bic.w	r9, r2, #3
 800072c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000730:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000734:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000738:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800073a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000740:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000744:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000748:	260f      	movs	r6, #15
 800074a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000750:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000754:	d01c      	beq.n	8000790 <HAL_GPIO_Init+0x13c>
 8000756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800075a:	4298      	cmp	r0, r3
 800075c:	d01a      	beq.n	8000794 <HAL_GPIO_Init+0x140>
 800075e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000762:	4298      	cmp	r0, r3
 8000764:	d018      	beq.n	8000798 <HAL_GPIO_Init+0x144>
 8000766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800076a:	4298      	cmp	r0, r3
 800076c:	d016      	beq.n	800079c <HAL_GPIO_Init+0x148>
 800076e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000772:	4298      	cmp	r0, r3
 8000774:	d014      	beq.n	80007a0 <HAL_GPIO_Init+0x14c>
 8000776:	4540      	cmp	r0, r8
 8000778:	d014      	beq.n	80007a4 <HAL_GPIO_Init+0x150>
 800077a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800077e:	4298      	cmp	r0, r3
 8000780:	d012      	beq.n	80007a8 <HAL_GPIO_Init+0x154>
 8000782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000786:	4298      	cmp	r0, r3
 8000788:	bf14      	ite	ne
 800078a:	2308      	movne	r3, #8
 800078c:	2307      	moveq	r3, #7
 800078e:	e00c      	b.n	80007aa <HAL_GPIO_Init+0x156>
 8000790:	2300      	movs	r3, #0
 8000792:	e00a      	b.n	80007aa <HAL_GPIO_Init+0x156>
 8000794:	2301      	movs	r3, #1
 8000796:	e008      	b.n	80007aa <HAL_GPIO_Init+0x156>
 8000798:	2302      	movs	r3, #2
 800079a:	e006      	b.n	80007aa <HAL_GPIO_Init+0x156>
 800079c:	2303      	movs	r3, #3
 800079e:	e004      	b.n	80007aa <HAL_GPIO_Init+0x156>
 80007a0:	2304      	movs	r3, #4
 80007a2:	e002      	b.n	80007aa <HAL_GPIO_Init+0x156>
 80007a4:	2305      	movs	r3, #5
 80007a6:	e000      	b.n	80007aa <HAL_GPIO_Init+0x156>
 80007a8:	2306      	movs	r3, #6
 80007aa:	fa03 f30a 	lsl.w	r3, r3, sl
 80007ae:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007b0:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007b4:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80007b6:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007b8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80007bc:	bf0c      	ite	eq
 80007be:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80007c0:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80007c2:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80007c6:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ca:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80007ce:	bf0c      	ite	eq
 80007d0:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80007d2:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80007d4:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d6:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007d8:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80007dc:	bf0c      	ite	eq
 80007de:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80007e0:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 80007e2:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80007e6:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007ea:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80007ec:	bf54      	ite	pl
 80007ee:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80007f0:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 80007f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f4:	3201      	adds	r2, #1
 80007f6:	2a10      	cmp	r2, #16
 80007f8:	f47f af38 	bne.w	800066c <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80007fc:	b005      	add	sp, #20
 80007fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000802:	bf00      	nop
 8000804:	40013c00 	.word	0x40013c00
 8000808:	40020000 	.word	0x40020000
 800080c:	40023800 	.word	0x40023800
 8000810:	40021400 	.word	0x40021400

08000814 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000814:	b902      	cbnz	r2, 8000818 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000816:	0409      	lsls	r1, r1, #16
 8000818:	6181      	str	r1, [r0, #24]
 800081a:	4770      	bx	lr

0800081c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800081c:	6943      	ldr	r3, [r0, #20]
 800081e:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000822:	bf08      	it	eq
 8000824:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000826:	6181      	str	r1, [r0, #24]
 8000828:	4770      	bx	lr
	...

0800082c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800082c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000830:	4604      	mov	r4, r0
 8000832:	b908      	cbnz	r0, 8000838 <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8000834:	2001      	movs	r0, #1
 8000836:	e170      	b.n	8000b1a <HAL_RCC_OscConfig+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000838:	6803      	ldr	r3, [r0, #0]
 800083a:	07dd      	lsls	r5, r3, #31
 800083c:	d403      	bmi.n	8000846 <HAL_RCC_OscConfig+0x1a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	0798      	lsls	r0, r3, #30
 8000842:	d44a      	bmi.n	80008da <HAL_RCC_OscConfig+0xae>
 8000844:	e08e      	b.n	8000964 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000846:	4b9b      	ldr	r3, [pc, #620]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	f002 020c 	and.w	r2, r2, #12
 800084e:	2a04      	cmp	r2, #4
 8000850:	d007      	beq.n	8000862 <HAL_RCC_OscConfig+0x36>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000852:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000854:	f002 020c 	and.w	r2, r2, #12
 8000858:	2a08      	cmp	r2, #8
 800085a:	d10a      	bne.n	8000872 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	0259      	lsls	r1, r3, #9
 8000860:	d507      	bpl.n	8000872 <HAL_RCC_OscConfig+0x46>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000862:	4b94      	ldr	r3, [pc, #592]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	039a      	lsls	r2, r3, #14
 8000868:	d5e9      	bpl.n	800083e <HAL_RCC_OscConfig+0x12>
 800086a:	6863      	ldr	r3, [r4, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1e6      	bne.n	800083e <HAL_RCC_OscConfig+0x12>
 8000870:	e7e0      	b.n	8000834 <HAL_RCC_OscConfig+0x8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000872:	6863      	ldr	r3, [r4, #4]
 8000874:	4d8f      	ldr	r5, [pc, #572]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800087a:	d006      	beq.n	800088a <HAL_RCC_OscConfig+0x5e>
 800087c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000880:	d108      	bne.n	8000894 <HAL_RCC_OscConfig+0x68>
 8000882:	682b      	ldr	r3, [r5, #0]
 8000884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000888:	602b      	str	r3, [r5, #0]
 800088a:	682b      	ldr	r3, [r5, #0]
 800088c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000890:	602b      	str	r3, [r5, #0]
 8000892:	e008      	b.n	80008a6 <HAL_RCC_OscConfig+0x7a>
 8000894:	682a      	ldr	r2, [r5, #0]
 8000896:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800089a:	602a      	str	r2, [r5, #0]
 800089c:	682a      	ldr	r2, [r5, #0]
 800089e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80008a2:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008a4:	b16b      	cbz	r3, 80008c2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a6:	f7ff fe65 	bl	8000574 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	4d82      	ldr	r5, [pc, #520]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ac:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ae:	682b      	ldr	r3, [r5, #0]
 80008b0:	039b      	lsls	r3, r3, #14
 80008b2:	d4c4      	bmi.n	800083e <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fe5e 	bl	8000574 <HAL_GetTick>
 80008b8:	1b80      	subs	r0, r0, r6
 80008ba:	2864      	cmp	r0, #100	; 0x64
 80008bc:	d9f7      	bls.n	80008ae <HAL_RCC_OscConfig+0x82>
          {
            return HAL_TIMEOUT;
 80008be:	2003      	movs	r0, #3
 80008c0:	e12b      	b.n	8000b1a <HAL_RCC_OscConfig+0x2ee>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c2:	f7ff fe57 	bl	8000574 <HAL_GetTick>
 80008c6:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	039f      	lsls	r7, r3, #14
 80008cc:	d5b7      	bpl.n	800083e <HAL_RCC_OscConfig+0x12>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ce:	f7ff fe51 	bl	8000574 <HAL_GetTick>
 80008d2:	1b80      	subs	r0, r0, r6
 80008d4:	2864      	cmp	r0, #100	; 0x64
 80008d6:	d9f7      	bls.n	80008c8 <HAL_RCC_OscConfig+0x9c>
 80008d8:	e7f1      	b.n	80008be <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008da:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	f012 0f0c 	tst.w	r2, #12
 80008e2:	d007      	beq.n	80008f4 <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008e4:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008e6:	f002 020c 	and.w	r2, r2, #12
 80008ea:	2a08      	cmp	r2, #8
 80008ec:	d111      	bne.n	8000912 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	025e      	lsls	r6, r3, #9
 80008f2:	d40e      	bmi.n	8000912 <HAL_RCC_OscConfig+0xe6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008f4:	4b6f      	ldr	r3, [pc, #444]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	0795      	lsls	r5, r2, #30
 80008fa:	d502      	bpl.n	8000902 <HAL_RCC_OscConfig+0xd6>
 80008fc:	68e2      	ldr	r2, [r4, #12]
 80008fe:	2a01      	cmp	r2, #1
 8000900:	d198      	bne.n	8000834 <HAL_RCC_OscConfig+0x8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	6921      	ldr	r1, [r4, #16]
 8000906:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800090a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800090e:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000910:	e028      	b.n	8000964 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000912:	68e2      	ldr	r2, [r4, #12]
 8000914:	4b68      	ldr	r3, [pc, #416]	; (8000ab8 <HAL_RCC_OscConfig+0x28c>)
 8000916:	b1ba      	cbz	r2, 8000948 <HAL_RCC_OscConfig+0x11c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800091c:	f7ff fe2a 	bl	8000574 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000920:	4d64      	ldr	r5, [pc, #400]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000922:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	4a63      	ldr	r2, [pc, #396]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000928:	0798      	lsls	r0, r3, #30
 800092a:	d405      	bmi.n	8000938 <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800092c:	f7ff fe22 	bl	8000574 <HAL_GetTick>
 8000930:	1b80      	subs	r0, r0, r6
 8000932:	2802      	cmp	r0, #2
 8000934:	d9f6      	bls.n	8000924 <HAL_RCC_OscConfig+0xf8>
 8000936:	e7c2      	b.n	80008be <HAL_RCC_OscConfig+0x92>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000938:	6813      	ldr	r3, [r2, #0]
 800093a:	6921      	ldr	r1, [r4, #16]
 800093c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000940:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	e00d      	b.n	8000964 <HAL_RCC_OscConfig+0x138>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800094a:	f7ff fe13 	bl	8000574 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800094e:	4d59      	ldr	r5, [pc, #356]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000950:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000952:	682b      	ldr	r3, [r5, #0]
 8000954:	0799      	lsls	r1, r3, #30
 8000956:	d505      	bpl.n	8000964 <HAL_RCC_OscConfig+0x138>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000958:	f7ff fe0c 	bl	8000574 <HAL_GetTick>
 800095c:	1b80      	subs	r0, r0, r6
 800095e:	2802      	cmp	r0, #2
 8000960:	d9f7      	bls.n	8000952 <HAL_RCC_OscConfig+0x126>
 8000962:	e7ac      	b.n	80008be <HAL_RCC_OscConfig+0x92>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	071a      	lsls	r2, r3, #28
 8000968:	d403      	bmi.n	8000972 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	075b      	lsls	r3, r3, #29
 800096e:	d420      	bmi.n	80009b2 <HAL_RCC_OscConfig+0x186>
 8000970:	e082      	b.n	8000a78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000972:	6962      	ldr	r2, [r4, #20]
 8000974:	4b51      	ldr	r3, [pc, #324]	; (8000abc <HAL_RCC_OscConfig+0x290>)
 8000976:	b172      	cbz	r2, 8000996 <HAL_RCC_OscConfig+0x16a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000978:	2201      	movs	r2, #1
 800097a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800097c:	f7ff fdfa 	bl	8000574 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000980:	4d4c      	ldr	r5, [pc, #304]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000982:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000984:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000986:	079f      	lsls	r7, r3, #30
 8000988:	d4ef      	bmi.n	800096a <HAL_RCC_OscConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800098a:	f7ff fdf3 	bl	8000574 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	2802      	cmp	r0, #2
 8000992:	d9f7      	bls.n	8000984 <HAL_RCC_OscConfig+0x158>
 8000994:	e793      	b.n	80008be <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000998:	f7ff fdec 	bl	8000574 <HAL_GetTick>

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099c:	4d45      	ldr	r5, [pc, #276]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800099e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009a2:	0798      	lsls	r0, r3, #30
 80009a4:	d5e1      	bpl.n	800096a <HAL_RCC_OscConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a6:	f7ff fde5 	bl	8000574 <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d9f7      	bls.n	80009a0 <HAL_RCC_OscConfig+0x174>
 80009b0:	e785      	b.n	80008be <HAL_RCC_OscConfig+0x92>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 80009b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009b6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009ba:	d10b      	bne.n	80009d4 <HAL_RCC_OscConfig+0x1a8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009c4:	641a      	str	r2, [r3, #64]	; 0x40
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009d0:	2601      	movs	r6, #1
 80009d2:	e000      	b.n	80009d6 <HAL_RCC_OscConfig+0x1aa>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80009d4:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d6:	4d3a      	ldr	r5, [pc, #232]	; (8000ac0 <HAL_RCC_OscConfig+0x294>)
 80009d8:	682b      	ldr	r3, [r5, #0]
 80009da:	05d9      	lsls	r1, r3, #23
 80009dc:	d504      	bpl.n	80009e8 <HAL_RCC_OscConfig+0x1bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009de:	68a3      	ldr	r3, [r4, #8]
 80009e0:	4d34      	ldr	r5, [pc, #208]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d110      	bne.n	8000a08 <HAL_RCC_OscConfig+0x1dc>
 80009e6:	e015      	b.n	8000a14 <HAL_RCC_OscConfig+0x1e8>
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e8:	682b      	ldr	r3, [r5, #0]
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	602b      	str	r3, [r5, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009f0:	f7ff fdc0 	bl	8000574 <HAL_GetTick>
 80009f4:	4607      	mov	r7, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	05da      	lsls	r2, r3, #23
 80009fa:	d4f0      	bmi.n	80009de <HAL_RCC_OscConfig+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009fc:	f7ff fdba 	bl	8000574 <HAL_GetTick>
 8000a00:	1bc0      	subs	r0, r0, r7
 8000a02:	2802      	cmp	r0, #2
 8000a04:	d9f7      	bls.n	80009f6 <HAL_RCC_OscConfig+0x1ca>
 8000a06:	e75a      	b.n	80008be <HAL_RCC_OscConfig+0x92>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a08:	2b05      	cmp	r3, #5
 8000a0a:	d108      	bne.n	8000a1e <HAL_RCC_OscConfig+0x1f2>
 8000a0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	672b      	str	r3, [r5, #112]	; 0x70
 8000a14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	672b      	str	r3, [r5, #112]	; 0x70
 8000a1c:	e008      	b.n	8000a30 <HAL_RCC_OscConfig+0x204>
 8000a1e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a20:	f022 0201 	bic.w	r2, r2, #1
 8000a24:	672a      	str	r2, [r5, #112]	; 0x70
 8000a26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a28:	f022 0204 	bic.w	r2, r2, #4
 8000a2c:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a2e:	b173      	cbz	r3, 8000a4e <HAL_RCC_OscConfig+0x222>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a30:	f7ff fda0 	bl	8000574 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a34:	4d1f      	ldr	r5, [pc, #124]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a36:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a38:	f241 3888 	movw	r8, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a3e:	079b      	lsls	r3, r3, #30
 8000a40:	d40d      	bmi.n	8000a5e <HAL_RCC_OscConfig+0x232>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a42:	f7ff fd97 	bl	8000574 <HAL_GetTick>
 8000a46:	1bc0      	subs	r0, r0, r7
 8000a48:	4540      	cmp	r0, r8
 8000a4a:	d9f7      	bls.n	8000a3c <HAL_RCC_OscConfig+0x210>
 8000a4c:	e737      	b.n	80008be <HAL_RCC_OscConfig+0x92>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a4e:	f7ff fd91 	bl	8000574 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a52:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a56:	4607      	mov	r7, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a5a:	0798      	lsls	r0, r3, #30
 8000a5c:	d406      	bmi.n	8000a6c <HAL_RCC_OscConfig+0x240>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000a5e:	b15e      	cbz	r6, 8000a78 <HAL_RCC_OscConfig+0x24c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000a62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	e005      	b.n	8000a78 <HAL_RCC_OscConfig+0x24c>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6c:	f7ff fd82 	bl	8000574 <HAL_GetTick>
 8000a70:	1bc0      	subs	r0, r0, r7
 8000a72:	4540      	cmp	r0, r8
 8000a74:	d9f0      	bls.n	8000a58 <HAL_RCC_OscConfig+0x22c>
 8000a76:	e722      	b.n	80008be <HAL_RCC_OscConfig+0x92>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a78:	69a2      	ldr	r2, [r4, #24]
 8000a7a:	b90a      	cbnz	r2, 8000a80 <HAL_RCC_OscConfig+0x254>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	e04c      	b.n	8000b1a <HAL_RCC_OscConfig+0x2ee>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a80:	4d0c      	ldr	r5, [pc, #48]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000a82:	68ab      	ldr	r3, [r5, #8]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	f43f aed3 	beq.w	8000834 <HAL_RCC_OscConfig+0x8>
 8000a8e:	4e0d      	ldr	r6, [pc, #52]	; (8000ac4 <HAL_RCC_OscConfig+0x298>)
 8000a90:	2300      	movs	r3, #0
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a92:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a94:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a96:	d134      	bne.n	8000b02 <HAL_RCC_OscConfig+0x2d6>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a98:	f7ff fd6c 	bl	8000574 <HAL_GetTick>
 8000a9c:	4680      	mov	r8, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a9e:	682b      	ldr	r3, [r5, #0]
 8000aa0:	4f04      	ldr	r7, [pc, #16]	; (8000ab4 <HAL_RCC_OscConfig+0x288>)
 8000aa2:	0199      	lsls	r1, r3, #6
 8000aa4:	d510      	bpl.n	8000ac8 <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa6:	f7ff fd65 	bl	8000574 <HAL_GetTick>
 8000aaa:	ebc8 0000 	rsb	r0, r8, r0
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9f5      	bls.n	8000a9e <HAL_RCC_OscConfig+0x272>
 8000ab2:	e704      	b.n	80008be <HAL_RCC_OscConfig+0x92>
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	42470000 	.word	0x42470000
 8000abc:	42470e80 	.word	0x42470e80
 8000ac0:	40007000 	.word	0x40007000
 8000ac4:	42470060 	.word	0x42470060
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ac8:	69e2      	ldr	r2, [r4, #28]
 8000aca:	6a23      	ldr	r3, [r4, #32]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ad0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ad6:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
 8000ada:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ae4:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	6033      	str	r3, [r6, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aea:	f7ff fd43 	bl	8000574 <HAL_GetTick>
 8000aee:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	019a      	lsls	r2, r3, #6
 8000af4:	d4c2      	bmi.n	8000a7c <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af6:	f7ff fd3d 	bl	8000574 <HAL_GetTick>
 8000afa:	1b00      	subs	r0, r0, r4
 8000afc:	2802      	cmp	r0, #2
 8000afe:	d9f7      	bls.n	8000af0 <HAL_RCC_OscConfig+0x2c4>
 8000b00:	e6dd      	b.n	80008be <HAL_RCC_OscConfig+0x92>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd37 	bl	8000574 <HAL_GetTick>
 8000b06:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	019b      	lsls	r3, r3, #6
 8000b0c:	d5b6      	bpl.n	8000a7c <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0e:	f7ff fd31 	bl	8000574 <HAL_GetTick>
 8000b12:	1b00      	subs	r0, r0, r4
 8000b14:	2802      	cmp	r0, #2
 8000b16:	d9f7      	bls.n	8000b08 <HAL_RCC_OscConfig+0x2dc>
 8000b18:	e6d1      	b.n	80008be <HAL_RCC_OscConfig+0x92>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b1a:	b002      	add	sp, #8
 8000b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b20:	4913      	ldr	r1, [pc, #76]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x50>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000b22:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b24:	688b      	ldr	r3, [r1, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d01c      	beq.n	8000b68 <HAL_RCC_GetSysClockFreq+0x48>
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d11c      	bne.n	8000b6c <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b34:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b36:	6849      	ldr	r1, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b3c:	bf14      	ite	ne
 8000b3e:	480d      	ldrne	r0, [pc, #52]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b40:	480d      	ldreq	r0, [pc, #52]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x58>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b46:	bf18      	it	ne
 8000b48:	2300      	movne	r3, #0
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b4e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b52:	f7ff fb39 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b58:	685b      	ldr	r3, [r3, #4]

      sysclockfreq = pllvco/pllp;
 8000b5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b5e:	3301      	adds	r3, #1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b66:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b6a:	bd08      	pop	{r3, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b6e:	bd08      	pop	{r3, pc}
 8000b70:	40023800 	.word	0x40023800
 8000b74:	017d7840 	.word	0x017d7840
 8000b78:	00f42400 	.word	0x00f42400

08000b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b80:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000b82:	4604      	mov	r4, r0
 8000b84:	b910      	cbnz	r0, 8000b8c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000b86:	2001      	movs	r0, #1
 8000b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b8c:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <HAL_RCC_ClockConfig+0x120>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	f002 020f 	and.w	r2, r2, #15
 8000b94:	428a      	cmp	r2, r1
 8000b96:	d317      	bcc.n	8000bc8 <HAL_RCC_ClockConfig+0x4c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b98:	6822      	ldr	r2, [r4, #0]
 8000b9a:	0796      	lsls	r6, r2, #30
 8000b9c:	d51c      	bpl.n	8000bd8 <HAL_RCC_ClockConfig+0x5c>
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ba0:	f012 0f04 	tst.w	r2, #4
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	6899      	ldrne	r1, [r3, #8]
 8000ba8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000bac:	6099      	strne	r1, [r3, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bae:	0710      	lsls	r0, r2, #28
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bb0:	bf42      	ittt	mi
 8000bb2:	6899      	ldrmi	r1, [r3, #8]
 8000bb4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000bb8:	6099      	strmi	r1, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bba:	6899      	ldr	r1, [r3, #8]
 8000bbc:	f021 00f0 	bic.w	r0, r1, #240	; 0xf0
 8000bc0:	68a1      	ldr	r1, [r4, #8]
 8000bc2:	4301      	orrs	r1, r0
 8000bc4:	6099      	str	r1, [r3, #8]
 8000bc6:	e007      	b.n	8000bd8 <HAL_RCC_ClockConfig+0x5c>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc8:	b2ca      	uxtb	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d1d7      	bne.n	8000b86 <HAL_RCC_ClockConfig+0xa>
 8000bd6:	e7df      	b.n	8000b98 <HAL_RCC_ClockConfig+0x1c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bd8:	07d1      	lsls	r1, r2, #31
 8000bda:	d406      	bmi.n	8000bea <HAL_RCC_ClockConfig+0x6e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <HAL_RCC_ClockConfig+0x120>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	f002 020f 	and.w	r2, r2, #15
 8000be4:	4295      	cmp	r5, r2
 8000be6:	d32c      	bcc.n	8000c42 <HAL_RCC_ClockConfig+0xc6>
 8000be8:	e032      	b.n	8000c50 <HAL_RCC_ClockConfig+0xd4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bea:	6863      	ldr	r3, [r4, #4]
 8000bec:	4a2c      	ldr	r2, [pc, #176]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d103      	bne.n	8000bfa <HAL_RCC_ClockConfig+0x7e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000bf8:	e008      	b.n	8000c0c <HAL_RCC_ClockConfig+0x90>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bfa:	1e99      	subs	r1, r3, #2
 8000bfc:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bfe:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c00:	d802      	bhi.n	8000c08 <HAL_RCC_ClockConfig+0x8c>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c02:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000c06:	e001      	b.n	8000c0c <HAL_RCC_ClockConfig+0x90>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c08:	f012 0f02 	tst.w	r2, #2
 8000c0c:	d0bb      	beq.n	8000b86 <HAL_RCC_ClockConfig+0xa>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c0e:	4e24      	ldr	r6, [pc, #144]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000c10:	68b2      	ldr	r2, [r6, #8]
 8000c12:	f022 0203 	bic.w	r2, r2, #3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	60b3      	str	r3, [r6, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c1a:	f7ff fcab 	bl	8000574 <HAL_GetTick>

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1e:	f241 3888 	movw	r8, #5000	; 0x1388
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c22:	4607      	mov	r7, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c24:	68b3      	ldr	r3, [r6, #8]
 8000c26:	6862      	ldr	r2, [r4, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c30:	d0d4      	beq.n	8000bdc <HAL_RCC_ClockConfig+0x60>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c32:	f7ff fc9f 	bl	8000574 <HAL_GetTick>
 8000c36:	1bc0      	subs	r0, r0, r7
 8000c38:	4540      	cmp	r0, r8
 8000c3a:	d9f3      	bls.n	8000c24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_TIMEOUT;
 8000c3c:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8000c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c42:	b2ea      	uxtb	r2, r5
 8000c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	429d      	cmp	r5, r3
 8000c4e:	d19a      	bne.n	8000b86 <HAL_RCC_ClockConfig+0xa>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c50:	6821      	ldr	r1, [r4, #0]
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	d506      	bpl.n	8000c64 <HAL_RCC_ClockConfig+0xe8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000c58:	6883      	ldr	r3, [r0, #8]
 8000c5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000c5e:	68e3      	ldr	r3, [r4, #12]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	6083      	str	r3, [r0, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c64:	070b      	lsls	r3, r1, #28
 8000c66:	d507      	bpl.n	8000c78 <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000c6a:	6921      	ldr	r1, [r4, #16]
 8000c6c:	6893      	ldr	r3, [r2, #8]
 8000c6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c76:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c78:	f7ff ff52 	bl	8000b20 <HAL_RCC_GetSysClockFreq>
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_RCC_ClockConfig+0x124>)
 8000c7e:	4a09      	ldr	r2, [pc, #36]	; (8000ca4 <HAL_RCC_ClockConfig+0x128>)
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	40d8      	lsrs	r0, r3
 8000c8a:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <HAL_RCC_ClockConfig+0x12c>)
 8000c8c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fc26 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 8000c94:	2000      	movs	r0, #0
 8000c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023c00 	.word	0x40023c00
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	080013f4 	.word	0x080013f4
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cac:	6803      	ldr	r3, [r0, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	f042 0201 	orr.w	r2, r2, #1
 8000cb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000cb6:	689a      	ldr	r2, [r3, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000cb8:	f002 0207 	and.w	r2, r2, #7
 8000cbc:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000cbe:	bf1e      	ittt	ne
 8000cc0:	681a      	ldrne	r2, [r3, #0]
 8000cc2:	f042 0201 	orrne.w	r2, r2, #1
 8000cc6:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000cc8:	2000      	movs	r0, #0
 8000cca:	4770      	bx	lr

08000ccc <HAL_TIM_OC_DelayElapsedCallback>:
 8000ccc:	4770      	bx	lr

08000cce <HAL_TIM_IC_CaptureCallback>:
 8000cce:	4770      	bx	lr

08000cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_TIM_TriggerCallback>:
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cd4:	6803      	ldr	r3, [r0, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000cda:	b510      	push	{r4, lr}
 8000cdc:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cde:	d514      	bpl.n	8000d0a <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	0792      	lsls	r2, r2, #30
 8000ce4:	d511      	bpl.n	8000d0a <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ce6:	f06f 0202 	mvn.w	r2, #2
 8000cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cec:	699b      	ldr	r3, [r3, #24]
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cee:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cf0:	079b      	lsls	r3, r3, #30
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cf2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cf4:	d002      	beq.n	8000cfc <HAL_TIM_IRQHandler+0x28>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000cf6:	f7ff ffea 	bl	8000cce <HAL_TIM_IC_CaptureCallback>
 8000cfa:	e004      	b.n	8000d06 <HAL_TIM_IRQHandler+0x32>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cfc:	f7ff ffe6 	bl	8000ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d00:	4620      	mov	r0, r4
 8000d02:	f7ff ffe5 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d06:	2300      	movs	r3, #0
 8000d08:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	691a      	ldr	r2, [r3, #16]
 8000d0e:	0750      	lsls	r0, r2, #29
 8000d10:	d516      	bpl.n	8000d40 <HAL_TIM_IRQHandler+0x6c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	0751      	lsls	r1, r2, #29
 8000d16:	d513      	bpl.n	8000d40 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d18:	f06f 0204 	mvn.w	r2, #4
 8000d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d1e:	699b      	ldr	r3, [r3, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d20:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d22:	f413 7f40 	tst.w	r3, #768	; 0x300
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d26:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d28:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d2a:	d002      	beq.n	8000d32 <HAL_TIM_IRQHandler+0x5e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d2c:	f7ff ffcf 	bl	8000cce <HAL_TIM_IC_CaptureCallback>
 8000d30:	e004      	b.n	8000d3c <HAL_TIM_IRQHandler+0x68>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d32:	f7ff ffcb 	bl	8000ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ffca 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	0712      	lsls	r2, r2, #28
 8000d46:	d515      	bpl.n	8000d74 <HAL_TIM_IRQHandler+0xa0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	0710      	lsls	r0, r2, #28
 8000d4c:	d512      	bpl.n	8000d74 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d4e:	f06f 0208 	mvn.w	r2, #8
 8000d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d54:	69db      	ldr	r3, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d56:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d58:	0799      	lsls	r1, r3, #30
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d5a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d5c:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d5e:	d002      	beq.n	8000d66 <HAL_TIM_IRQHandler+0x92>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d60:	f7ff ffb5 	bl	8000cce <HAL_TIM_IC_CaptureCallback>
 8000d64:	e004      	b.n	8000d70 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d66:	f7ff ffb1 	bl	8000ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f7ff ffb0 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d70:	2300      	movs	r3, #0
 8000d72:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	06d2      	lsls	r2, r2, #27
 8000d7a:	d516      	bpl.n	8000daa <HAL_TIM_IRQHandler+0xd6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000d7c:	68da      	ldr	r2, [r3, #12]
 8000d7e:	06d0      	lsls	r0, r2, #27
 8000d80:	d513      	bpl.n	8000daa <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d82:	f06f 0210 	mvn.w	r2, #16
 8000d86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d88:	69db      	ldr	r3, [r3, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d8a:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d8c:	f413 7f40 	tst.w	r3, #768	; 0x300
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d92:	4620      	mov	r0, r4
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d94:	d002      	beq.n	8000d9c <HAL_TIM_IRQHandler+0xc8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d96:	f7ff ff9a 	bl	8000cce <HAL_TIM_IC_CaptureCallback>
 8000d9a:	e004      	b.n	8000da6 <HAL_TIM_IRQHandler+0xd2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d9c:	f7ff ff96 	bl	8000ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f7ff ff95 	bl	8000cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000da6:	2300      	movs	r3, #0
 8000da8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	07d1      	lsls	r1, r2, #31
 8000db0:	d508      	bpl.n	8000dc4 <HAL_TIM_IRQHandler+0xf0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	07d2      	lsls	r2, r2, #31
 8000db6:	d505      	bpl.n	8000dc4 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000db8:	f06f 0201 	mvn.w	r2, #1
 8000dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f000 f9a2 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	0610      	lsls	r0, r2, #24
 8000dca:	d508      	bpl.n	8000dde <HAL_TIM_IRQHandler+0x10a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	0611      	lsls	r1, r2, #24
 8000dd0:	d505      	bpl.n	8000dde <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000dd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f000 f95d 	bl	8001098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	0652      	lsls	r2, r2, #25
 8000de4:	d508      	bpl.n	8000df8 <HAL_TIM_IRQHandler+0x124>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	0650      	lsls	r0, r2, #25
 8000dea:	d505      	bpl.n	8000df8 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000dec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ff6d 	bl	8000cd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	0691      	lsls	r1, r2, #26
 8000dfe:	d50a      	bpl.n	8000e16 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	0692      	lsls	r2, r2, #26
 8000e04:	d507      	bpl.n	8000e16 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e06:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000e0a:	4620      	mov	r0, r4
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e0c:	611a      	str	r2, [r3, #16]
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000e12:	f000 b940 	b.w	8001096 <HAL_TIMEx_CommutCallback>
 8000e16:	bd10      	pop	{r4, pc}

08000e18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e18:	4a30      	ldr	r2, [pc, #192]	; (8000edc <TIM_Base_SetConfig+0xc4>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000e1a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d012      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e24:	d00f      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	d00b      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d007      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	d003      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d119      	bne.n	8000e7a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e46:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <TIM_Base_SetConfig+0xc4>)
 8000e50:	4290      	cmp	r0, r2
 8000e52:	d029      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e58:	d026      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e5e:	4290      	cmp	r0, r2
 8000e60:	d022      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d01e      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e6e:	4290      	cmp	r0, r2
 8000e70:	d01a      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d016      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <TIM_Base_SetConfig+0xc8>)
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	d013      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e84:	4290      	cmp	r0, r2
 8000e86:	d00f      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8c:	4290      	cmp	r0, r2
 8000e8e:	d00b      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000e94:	4290      	cmp	r0, r2
 8000e96:	d007      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	d003      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d103      	bne.n	8000eb0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ea8:	68ca      	ldr	r2, [r1, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000eb0:	694a      	ldr	r2, [r1, #20]
 8000eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eb6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000eb8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000eba:	688b      	ldr	r3, [r1, #8]
 8000ebc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000ebe:	680b      	ldr	r3, [r1, #0]
 8000ec0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <TIM_Base_SetConfig+0xc4>)
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d003      	beq.n	8000ed0 <TIM_Base_SetConfig+0xb8>
 8000ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	d101      	bne.n	8000ed4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ed0:	690b      	ldr	r3, [r1, #16]
 8000ed2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	6143      	str	r3, [r0, #20]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40014000 	.word	0x40014000

08000ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ee4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	b1a0      	cbz	r0, 8000f14 <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000eea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000eee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ef2:	b91b      	cbnz	r3, 8000efc <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ef4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000ef8:	f000 f9fc 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f02:	6820      	ldr	r0, [r4, #0]
 8000f04:	1d21      	adds	r1, r4, #4
 8000f06:	f7ff ff87 	bl	8000e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8000f10:	2000      	movs	r0, #0
 8000f12:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
  {
    return HAL_ERROR;
 8000f14:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8000f16:	bd10      	pop	{r4, pc}

08000f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000f18:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000f1a:	6884      	ldr	r4, [r0, #8]
 8000f1c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000f20:	4321      	orrs	r1, r4
 8000f22:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f24:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f28:	6083      	str	r3, [r0, #8]
 8000f2a:	bd10      	pop	{r4, pc}

08000f2c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000f2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f30:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8000f32:	b570      	push	{r4, r5, r6, lr}
 8000f34:	4604      	mov	r4, r0
 8000f36:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000f3a:	f000 808d 	beq.w	8001058 <HAL_TIM_ConfigClockSource+0x12c>

  htim->State = HAL_TIM_STATE_BUSY;
 8000f3e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000f42:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000f44:	2301      	movs	r3, #1
 8000f46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000f4a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000f54:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 8000f56:	680b      	ldr	r3, [r1, #0]
 8000f58:	2b40      	cmp	r3, #64	; 0x40
 8000f5a:	d059      	beq.n	8001010 <HAL_TIM_ConfigClockSource+0xe4>
 8000f5c:	d80a      	bhi.n	8000f74 <HAL_TIM_ConfigClockSource+0x48>
 8000f5e:	2b10      	cmp	r3, #16
 8000f60:	d06d      	beq.n	800103e <HAL_TIM_ConfigClockSource+0x112>
 8000f62:	d802      	bhi.n	8000f6a <HAL_TIM_ConfigClockSource+0x3e>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d06a      	beq.n	800103e <HAL_TIM_ConfigClockSource+0x112>
 8000f68:	e070      	b.n	800104c <HAL_TIM_ConfigClockSource+0x120>
 8000f6a:	2b20      	cmp	r3, #32
 8000f6c:	d067      	beq.n	800103e <HAL_TIM_ConfigClockSource+0x112>
 8000f6e:	2b30      	cmp	r3, #48	; 0x30
 8000f70:	d065      	beq.n	800103e <HAL_TIM_ConfigClockSource+0x112>
 8000f72:	e06b      	b.n	800104c <HAL_TIM_ConfigClockSource+0x120>
 8000f74:	2b60      	cmp	r3, #96	; 0x60
 8000f76:	d033      	beq.n	8000fe0 <HAL_TIM_ConfigClockSource+0xb4>
 8000f78:	d818      	bhi.n	8000fac <HAL_TIM_ConfigClockSource+0x80>
 8000f7a:	2b50      	cmp	r3, #80	; 0x50
 8000f7c:	d166      	bne.n	800104c <HAL_TIM_ConfigClockSource+0x120>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000f7e:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f80:	684d      	ldr	r5, [r1, #4]
 8000f82:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f84:	6a01      	ldr	r1, [r0, #32]
 8000f86:	f021 0101 	bic.w	r1, r1, #1
 8000f8a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f8c:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f8e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000f96:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f98:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000f9c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f9e:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000fa0:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000fa6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000faa:	e04e      	b.n	800104a <HAL_TIM_ConfigClockSource+0x11e>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000fac:	2b70      	cmp	r3, #112	; 0x70
 8000fae:	d00c      	beq.n	8000fca <HAL_TIM_ConfigClockSource+0x9e>
 8000fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fb4:	d14a      	bne.n	800104c <HAL_TIM_ConfigClockSource+0x120>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8000fb6:	68cb      	ldr	r3, [r1, #12]
 8000fb8:	684a      	ldr	r2, [r1, #4]
 8000fba:	6889      	ldr	r1, [r1, #8]
 8000fbc:	f7ff ffac 	bl	8000f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	6893      	ldr	r3, [r2, #8]
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	e008      	b.n	8000fdc <HAL_TIM_ConfigClockSource+0xb0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8000fca:	68cb      	ldr	r3, [r1, #12]
 8000fcc:	684a      	ldr	r2, [r1, #4]
 8000fce:	6889      	ldr	r1, [r1, #8]
 8000fd0:	f7ff ffa2 	bl	8000f18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fdc:	6093      	str	r3, [r2, #8]
      break;
 8000fde:	e035      	b.n	800104c <HAL_TIM_ConfigClockSource+0x120>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000fe0:	684d      	ldr	r5, [r1, #4]
 8000fe2:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fe4:	6a01      	ldr	r1, [r0, #32]
 8000fe6:	f021 0110 	bic.w	r1, r1, #16
 8000fea:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fec:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000fee:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ff0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ff8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ffc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001000:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001002:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001004:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800100a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800100e:	e01c      	b.n	800104a <HAL_TIM_ConfigClockSource+0x11e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001010:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001012:	684d      	ldr	r5, [r1, #4]
 8001014:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001016:	6a01      	ldr	r1, [r0, #32]
 8001018:	f021 0101 	bic.w	r1, r1, #1
 800101c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800101e:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001020:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001024:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001028:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800102a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800102e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001030:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001032:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001038:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800103c:	e005      	b.n	800104a <HAL_TIM_ConfigClockSource+0x11e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800103e:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001040:	f043 0307 	orr.w	r3, r3, #7
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001044:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001048:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800104a:	6083      	str	r3, [r0, #8]
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 800104c:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800104e:	2000      	movs	r0, #0
    }

    default:
      break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001054:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

  return HAL_OK;
}
 8001058:	bd70      	pop	{r4, r5, r6, pc}

0800105a <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800105a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800105e:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001060:	b530      	push	{r4, r5, lr}
 8001062:	f04f 0302 	mov.w	r3, #2
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001066:	d014      	beq.n	8001092 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001068:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800106c:	6803      	ldr	r3, [r0, #0]
 800106e:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001070:	689a      	ldr	r2, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001072:	f024 0570 	bic.w	r5, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001076:	680c      	ldr	r4, [r1, #0]
 8001078:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800107a:	f022 0580 	bic.w	r5, r2, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800107e:	684a      	ldr	r2, [r1, #4]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001080:	605c      	str	r4, [r3, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001082:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001084:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001086:	2301      	movs	r3, #1
 8001088:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800108c:	2300      	movs	r3, #0
 800108e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001092:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001094:	bd30      	pop	{r4, r5, pc}

08001096 <HAL_TIMEx_CommutCallback>:
 8001096:	4770      	bx	lr

08001098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001098:	4770      	bx	lr
	...

0800109c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800109c:	b530      	push	{r4, r5, lr}
 800109e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	2214      	movs	r2, #20
 80010a2:	2100      	movs	r1, #0
 80010a4:	a803      	add	r0, sp, #12
 80010a6:	f000 f991 	bl	80013cc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2400      	movs	r4, #0
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_GPIO_Init+0x64>)
 80010ae:	9401      	str	r4, [sp, #4]
 80010b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010b2:	4d14      	ldr	r5, [pc, #80]	; (8001104 <MX_GPIO_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
 80010ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c4:	9402      	str	r4, [sp, #8]
 80010c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010c8:	f042 0208 	orr.w	r2, r2, #8
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010d6:	4622      	mov	r2, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	f44f 4170 	mov.w	r1, #61440	; 0xf000

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010de:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80010e0:	f7ff fb98 	bl	8000814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80010e8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	a903      	add	r1, sp, #12
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ec:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	4628      	mov	r0, r5
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	f7ff faad 	bl	8000654 <HAL_GPIO_Init>

}
 80010fa:	b009      	add	sp, #36	; 0x24
 80010fc:	bd30      	pop	{r4, r5, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020c00 	.word	0x40020c00

08001108 <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001108:	b508      	push	{r3, lr}

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x18>)
 800110c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001110:	f7ff fb84 	bl	800081c <HAL_GPIO_TogglePin>

	HAL_TIM_Base_Start_IT(&htim2);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x1c>)

}
 8001116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);

	HAL_TIM_Base_Start_IT(&htim2);
 800111a:	f7ff bdc7 	b.w	8000cac <HAL_TIM_Base_Start_IT>
 800111e:	bf00      	nop
 8001120:	40020c00 	.word	0x40020c00
 8001124:	2000002c 	.word	0x2000002c

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b530      	push	{r4, r5, lr}
 800112a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112c:	2230      	movs	r2, #48	; 0x30
 800112e:	2100      	movs	r1, #0
 8001130:	a808      	add	r0, sp, #32
 8001132:	f000 f94b 	bl	80013cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001136:	2100      	movs	r1, #0
 8001138:	2214      	movs	r2, #20
 800113a:	a803      	add	r0, sp, #12
 800113c:	f000 f946 	bl	80013cc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2400      	movs	r4, #0
 8001142:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <SystemClock_Config+0x90>)
 8001144:	9401      	str	r4, [sp, #4]
 8001146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001148:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <SystemClock_Config+0x94>)
 800115a:	9402      	str	r4, [sp, #8]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116e:	2301      	movs	r3, #1
 8001170:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001172:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001176:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800117e:	2319      	movs	r3, #25
 8001180:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001182:	f44f 73a8 	mov.w	r3, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001188:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800118c:	2304      	movs	r3, #4
 800118e:	9313      	str	r3, [sp, #76]	; 0x4c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001192:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f7ff fb4a 	bl	800082c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a8:	a803      	add	r0, sp, #12
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ae:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011b0:	f7ff fce4 	bl	8000b7c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80011b4:	b015      	add	sp, #84	; 0x54
 80011b6:	bd30      	pop	{r4, r5, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b508      	push	{r3, lr}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f7ff f9b1 	bl	8000528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f7ff ffaf 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f7ff ff67 	bl	800109c <MX_GPIO_Init>
  MX_TIM2_Init();
 80011ce:	f000 f85b 	bl	8001288 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80011d2:	4802      	ldr	r0, [pc, #8]	; (80011dc <main+0x1c>)
 80011d4:	f7ff fd6a 	bl	8000cac <HAL_TIM_Base_Start_IT>
 80011d8:	e7fe      	b.n	80011d8 <main+0x18>
 80011da:	bf00      	nop
 80011dc:	2000002c 	.word	0x2000002c

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x34>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	9100      	str	r1, [sp, #0]
 80011ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
 80011f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	9101      	str	r1, [sp, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	b002      	add	sp, #8
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800

0800121c <NMI_Handler>:
 800121c:	4770      	bx	lr

0800121e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121e:	e7fe      	b.n	800121e <HardFault_Handler>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler>

08001226 <SVC_Handler>:
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f7ff b996 	b.w	800055c <HAL_IncTick>

08001230 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001230:	4801      	ldr	r0, [pc, #4]	; (8001238 <TIM2_IRQHandler+0x8>)
 8001232:	f7ff bd4f 	b.w	8000cd4 <HAL_TIM_IRQHandler>
 8001236:	bf00      	nop
 8001238:	2000002c 	.word	0x2000002c

0800123c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	490f      	ldr	r1, [pc, #60]	; (800127c <SystemInit+0x40>)
 800123e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001242:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <SystemInit+0x44>)
 800124c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800124e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001256:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800125e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001262:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <SystemInit+0x48>)
 8001266:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800126e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001270:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	40023800 	.word	0x40023800
 8001284:	24003010 	.word	0x24003010

08001288 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	2210      	movs	r2, #16
 800128c:	2100      	movs	r1, #0
 800128e:	a802      	add	r0, sp, #8
 8001290:	f000 f89c 	bl	80013cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001294:	4815      	ldr	r0, [pc, #84]	; (80012ec <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 84000;
 8001296:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <MX_TIM2_Init+0x68>)
 8001298:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

/* TIM2 init function */
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	2300      	movs	r3, #0

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 84000;
 800129e:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1000;
 80012a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

/* TIM2 init function */
void MX_TIM2_Init(void)
{
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	9301      	str	r3, [sp, #4]

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 84000;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1000;
 80012ac:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ae:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b2:	f7ff fe17 	bl	8000ee4 <HAL_TIM_Base_Init>
 80012b6:	b108      	cbz	r0, 80012bc <MX_TIM2_Init+0x34>
  {
    Error_Handler();
 80012b8:	f7ff ff92 	bl	80011e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c0:	a902      	add	r1, sp, #8
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <MX_TIM2_Init+0x64>)
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f7ff fe31 	bl	8000f2c <HAL_TIM_ConfigClockSource>
 80012ca:	b108      	cbz	r0, 80012d0 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 80012cc:	f7ff ff88 	bl	80011e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d0:	2220      	movs	r2, #32
 80012d2:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d4:	4669      	mov	r1, sp
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_TIM2_Init+0x64>)
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012dc:	f7ff febd 	bl	800105a <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	b108      	cbz	r0, 80012e6 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80012e2:	f7ff ff7d 	bl	80011e0 <Error_Handler>
  }

}
 80012e6:	b007      	add	sp, #28
 80012e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ec:	2000002c 	.word	0x2000002c
 80012f0:	00014820 	.word	0x00014820

080012f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80012f4:	6803      	ldr	r3, [r0, #0]
 80012f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012fa:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM2)
 80012fc:	d113      	bne.n	8001326 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012fe:	2200      	movs	r2, #0
 8001300:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001304:	9201      	str	r2, [sp, #4]
 8001306:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001308:	f041 0101 	orr.w	r1, r1, #1
 800130c:	6419      	str	r1, [r3, #64]	; 0x40
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	9301      	str	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001316:	201c      	movs	r0, #28
 8001318:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131a:	9b01      	ldr	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800131c:	f7ff f942 	bl	80005a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001320:	201c      	movs	r0, #28
 8001322:	f7ff f973 	bl	800060c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001326:	b003      	add	sp, #12
 8001328:	f85d fb04 	ldr.w	pc, [sp], #4

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001332:	e003      	b.n	800133c <LoopCopyDataInit>

08001334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800133a:	3104      	adds	r1, #4

0800133c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001344:	d3f6      	bcc.n	8001334 <CopyDataInit>
  ldr  r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001348:	e002      	b.n	8001350 <LoopFillZerobss>

0800134a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800134a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800134c:	f842 3b04 	str.w	r3, [r2], #4

08001350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001354:	d3f9      	bcc.n	800134a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001356:	f7ff ff71 	bl	800123c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f000 f811 	bl	8001380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff ff2f 	bl	80011c0 <main>
  bx  lr    
 8001362:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001368:	08001414 	.word	0x08001414
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001370:	2000000c 	.word	0x2000000c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001374:	2000000c 	.word	0x2000000c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001378:	2000006c 	.word	0x2000006c

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>
	...

08001380 <__libc_init_array>:
 8001380:	b570      	push	{r4, r5, r6, lr}
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <__libc_init_array+0x3c>)
 8001384:	4c0e      	ldr	r4, [pc, #56]	; (80013c0 <__libc_init_array+0x40>)
 8001386:	1ae4      	subs	r4, r4, r3
 8001388:	10a4      	asrs	r4, r4, #2
 800138a:	2500      	movs	r5, #0
 800138c:	461e      	mov	r6, r3
 800138e:	42a5      	cmp	r5, r4
 8001390:	d004      	beq.n	800139c <__libc_init_array+0x1c>
 8001392:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001396:	4798      	blx	r3
 8001398:	3501      	adds	r5, #1
 800139a:	e7f8      	b.n	800138e <__libc_init_array+0xe>
 800139c:	f000 f81e 	bl	80013dc <_init>
 80013a0:	4c08      	ldr	r4, [pc, #32]	; (80013c4 <__libc_init_array+0x44>)
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <__libc_init_array+0x48>)
 80013a4:	1ae4      	subs	r4, r4, r3
 80013a6:	10a4      	asrs	r4, r4, #2
 80013a8:	2500      	movs	r5, #0
 80013aa:	461e      	mov	r6, r3
 80013ac:	42a5      	cmp	r5, r4
 80013ae:	d004      	beq.n	80013ba <__libc_init_array+0x3a>
 80013b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013b4:	4798      	blx	r3
 80013b6:	3501      	adds	r5, #1
 80013b8:	e7f8      	b.n	80013ac <__libc_init_array+0x2c>
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
 80013bc:	0800140c 	.word	0x0800140c
 80013c0:	0800140c 	.word	0x0800140c
 80013c4:	08001410 	.word	0x08001410
 80013c8:	0800140c 	.word	0x0800140c

080013cc <memset>:
 80013cc:	4402      	add	r2, r0
 80013ce:	4603      	mov	r3, r0
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d002      	beq.n	80013da <memset+0xe>
 80013d4:	f803 1b01 	strb.w	r1, [r3], #1
 80013d8:	e7fa      	b.n	80013d0 <memset+0x4>
 80013da:	4770      	bx	lr

080013dc <_init>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	bf00      	nop
 80013e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e2:	bc08      	pop	{r3}
 80013e4:	469e      	mov	lr, r3
 80013e6:	4770      	bx	lr

080013e8 <_fini>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr
